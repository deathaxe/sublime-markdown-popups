{
    "docs": [
        {
            "location": "/", 
            "text": "About Markdown Popups\n\ue157\n\n\nOverview\n\ue157\n\n\nSublime Markdown Popups (MdPopups) is a library for Sublime Text plugins.  It utilizes the new plugin API found in ST3 Beta to create popups and phantoms from Markdown or HTML. It requires at least ST3 3124+. MdPopups utilizes Python Markdown with a couple of special extensions to convert Markdown to HTML that can be used to create popups and/or phantoms.  It also provides a number of other helpful API commands to aid in creating great popups and phantoms.\n\n\nMdPopups will use your color scheme to create popups/phantoms that fit your editors look.\n\n\n\n\nFeatures\n\ue157\n\n\n\n\nCan take Markdown or HTML and create nice looking popups and phantoms.\n\n\nDynamically creates popup and phantom themes from your current Sublime color scheme.\n\n\nCan create syntax highlighted code blocks easily using your existing Sublime color scheme (can also use Pygments with some setup).\n\n\nCan create color preview boxes via API calls.\n\n\nA CSS template environment that allows users to override and tweak the overall look of the popups and phantoms to better fit their preferred look.\n\n\nPlugins can extend the current CSS to inject plugin specific class styling.", 
            "title": "About Markdown Popups"
        }, 
        {
            "location": "/#about-markdown-popups", 
            "text": "", 
            "title": "About Markdown Popups"
        }, 
        {
            "location": "/#overview", 
            "text": "Sublime Markdown Popups (MdPopups) is a library for Sublime Text plugins.  It utilizes the new plugin API found in ST3 Beta to create popups and phantoms from Markdown or HTML. It requires at least ST3 3124+. MdPopups utilizes Python Markdown with a couple of special extensions to convert Markdown to HTML that can be used to create popups and/or phantoms.  It also provides a number of other helpful API commands to aid in creating great popups and phantoms.  MdPopups will use your color scheme to create popups/phantoms that fit your editors look.", 
            "title": "Overview"
        }, 
        {
            "location": "/#features", 
            "text": "Can take Markdown or HTML and create nice looking popups and phantoms.  Dynamically creates popup and phantom themes from your current Sublime color scheme.  Can create syntax highlighted code blocks easily using your existing Sublime color scheme (can also use Pygments with some setup).  Can create color preview boxes via API calls.  A CSS template environment that allows users to override and tweak the overall look of the popups and phantoms to better fit their preferred look.  Plugins can extend the current CSS to inject plugin specific class styling.", 
            "title": "Features"
        }, 
        {
            "location": "/installation/", 
            "text": "Installation\n\ue157\n\n\nPackage Control\n\ue157\n\n\nIn order for your plugin to utilize Markdown Popups, you must be using \nPackage Control\n, and you must add \nmdpopups\n (and other related dependencies) as a dependency for your plugin.  This can be done in one of two ways, both of which are \ndocumented\n by Package Control; see \nUsing Dependencies\n.  Package Control will install and update the dependency for you.  Package Control will also ensure that \nmdpopups\n is loaded before your plugin loads.\n\n\nIf ever you are on a older version than is currently released, and Package Control has not updated to the latest, you can force the update by running the \nPackage Control: Satisfy Dependencies\n command from the command palette.\n\n\nRemember, MdPopups is for Sublime Text 3 builds 3124+.", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#installation", 
            "text": "", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#package-control", 
            "text": "In order for your plugin to utilize Markdown Popups, you must be using  Package Control , and you must add  mdpopups  (and other related dependencies) as a dependency for your plugin.  This can be done in one of two ways, both of which are  documented  by Package Control; see  Using Dependencies .  Package Control will install and update the dependency for you.  Package Control will also ensure that  mdpopups  is loaded before your plugin loads.  If ever you are on a older version than is currently released, and Package Control has not updated to the latest, you can force the update by running the  Package Control: Satisfy Dependencies  command from the command palette.  Remember, MdPopups is for Sublime Text 3 builds 3124+.", 
            "title": "Package Control"
        }, 
        {
            "location": "/settings/", 
            "text": "User Settings\n\ue157\n\n\nConfiguring MdPopups\n\ue157\n\n\nAll settings for MdPopups are placed in Sublime's \nPreferences.sublime-settings\n.  They are applied globally and to all popups and phantoms.\n\n\nmdpopups.debug\n\ue157\n\n\nTurns on debug mode.  This will dump out all sorts of info to the console.  Content before parsing to HTML, final HTML output, traceback from failures, etc..  This is more useful for plugin developers.  It works by specifying an error level.  \n0\n or \nfalse\n would disable it.  1 would trigger on errors. 2 would trigger on warnings and any level below.  3 would be general info (like HTML output) and any level below.\n\n\n    \nmdpopups.debug\n:\n \n1\n,\n\n\n\n\n\nmdpopups.disable\n\ue157\n\n\nGlobal kill switch to prevent popups (created by MdPopups) from appearing.\n\n\n    \nmdpopups.disable\n:\n \ntrue\n,\n\n\n\n\n\nmdpopups.cache_refresh_time\n\ue157\n\n\nControl how long a CSS theme file will be in the cache before being refreshed.  Value should be a positive integer greater than 0.  Units are in minutes.  Default is 30.\n\n\n    \nmdpopups.cache_refresh_time\n:\n \n30\n,\n\n\n\n\n\nmdpopups.cache_limit\n\ue157\n\n\nControl how many CSS theme files will be kept in cache at any given time.  Value should be a positive integer greater than or equal to 0.\n\n\n    \nmdpopups.cache_limit\n:\n \n10\n\n\n\n\n\nmdpopups.use_sublime_highlighter\n\ue157\n\n\nControls whether the Pygments or the native Sublime syntax highlighter is used for code highlighting.  This affects code highlighting in Markdown conversion and when code is directly processed using \nsyntax_highlight\n. To learn more about the syntax highlighter see \nSyntax Highlighting\n.\n\n\n    \nmdpopups.use_sublime_highlighter\n:\n \ntrue\n\n\n\n\n\nmdpopups.user_css\n\ue157\n\n\nOverrides the default CSS and/or CSS of a plugin.  Value should be a relative path pointing to the CSS file: \nPackages/User/my_custom_theme.css\n.  Slashes should be forward slashes. By default, it will point to \nPackages/User/mdpopups.css\n.  User CSS overrides \nall\n CSS as it is the last to be processed.\n\n\n    \nmdpopups.user_css\n:\n \nPackages/User/mdpopups.css\n\n\n\n\n\nmdpopups.default_style\n\ue157\n\n\nControls whether MdPopups' default styling (contained in \ndefault.css\n) will be applied or not.\n\n\nmdpopups.sublime_user_lang_map\n\ue157\n\n\nThis setting is for the Sublime Syntax Highlighter and allows the mapping of personal Sublime syntax languages which are not yet included, or will not be included, in the official mapping table.  You can either define your own new entry, or use the same language name of an existing entry to extend the language \nmapping_alias\n or syntax languages.  When extending, the user mappings will be cycled through first.\n\n\n    \nmdpopups.sublime_user_lang_map\n:\n \n{\n\n        \nlanguage\n:\n \n((\nmapping_alias\n,),\n \n(\nMyPackage/MySyntaxLanguage\n))\n\n    \n}\n\n\n\n\n\nExample\n:\n\nmdpopups.sublime_user_lang_map\n:\n \n{\n\n    \njavascript\n:\n \n((\njavascript\n,\n \njs\n),\n \n(\nJavaScript/JavaScript\n,\n \nJavaScriptNext - ES6 Syntax/JavaScriptNext\n))\n\n\n}\n\n\n\n\nFor a list of all currently supported syntax mappings, see the official \nmapping file\n.\n\n\n\n\nTip\n\n\nWhen submitting new languages to the mapping table, it is encouraged to pick key names that correspond to what is used in Pygments so a User can switch between Pygments' and Sublime's syntax highlighter and still get highlighting.", 
            "title": "User Settings"
        }, 
        {
            "location": "/settings/#user-settings", 
            "text": "", 
            "title": "User Settings"
        }, 
        {
            "location": "/settings/#configuring-mdpopups", 
            "text": "All settings for MdPopups are placed in Sublime's  Preferences.sublime-settings .  They are applied globally and to all popups and phantoms.", 
            "title": "Configuring MdPopups"
        }, 
        {
            "location": "/settings/#mdpopupsdebug", 
            "text": "Turns on debug mode.  This will dump out all sorts of info to the console.  Content before parsing to HTML, final HTML output, traceback from failures, etc..  This is more useful for plugin developers.  It works by specifying an error level.   0  or  false  would disable it.  1 would trigger on errors. 2 would trigger on warnings and any level below.  3 would be general info (like HTML output) and any level below.       mdpopups.debug :   1 ,", 
            "title": "mdpopups.debug"
        }, 
        {
            "location": "/settings/#mdpopupsdisable", 
            "text": "Global kill switch to prevent popups (created by MdPopups) from appearing.       mdpopups.disable :   true ,", 
            "title": "mdpopups.disable"
        }, 
        {
            "location": "/settings/#mdpopupscache_refresh_time", 
            "text": "Control how long a CSS theme file will be in the cache before being refreshed.  Value should be a positive integer greater than 0.  Units are in minutes.  Default is 30.       mdpopups.cache_refresh_time :   30 ,", 
            "title": "mdpopups.cache_refresh_time"
        }, 
        {
            "location": "/settings/#mdpopupscache_limit", 
            "text": "Control how many CSS theme files will be kept in cache at any given time.  Value should be a positive integer greater than or equal to 0.       mdpopups.cache_limit :   10", 
            "title": "mdpopups.cache_limit"
        }, 
        {
            "location": "/settings/#mdpopupsuse_sublime_highlighter", 
            "text": "Controls whether the Pygments or the native Sublime syntax highlighter is used for code highlighting.  This affects code highlighting in Markdown conversion and when code is directly processed using  syntax_highlight . To learn more about the syntax highlighter see  Syntax Highlighting .       mdpopups.use_sublime_highlighter :   true", 
            "title": "mdpopups.use_sublime_highlighter"
        }, 
        {
            "location": "/settings/#mdpopupsuser_css", 
            "text": "Overrides the default CSS and/or CSS of a plugin.  Value should be a relative path pointing to the CSS file:  Packages/User/my_custom_theme.css .  Slashes should be forward slashes. By default, it will point to  Packages/User/mdpopups.css .  User CSS overrides  all  CSS as it is the last to be processed.       mdpopups.user_css :   Packages/User/mdpopups.css", 
            "title": "mdpopups.user_css"
        }, 
        {
            "location": "/settings/#mdpopupsdefault_style", 
            "text": "Controls whether MdPopups' default styling (contained in  default.css ) will be applied or not.", 
            "title": "mdpopups.default_style"
        }, 
        {
            "location": "/settings/#mdpopupssublime_user_lang_map", 
            "text": "This setting is for the Sublime Syntax Highlighter and allows the mapping of personal Sublime syntax languages which are not yet included, or will not be included, in the official mapping table.  You can either define your own new entry, or use the same language name of an existing entry to extend the language  mapping_alias  or syntax languages.  When extending, the user mappings will be cycled through first.       mdpopups.sublime_user_lang_map :   { \n         language :   (( mapping_alias ,),   ( MyPackage/MySyntaxLanguage )) \n     }   Example : mdpopups.sublime_user_lang_map :   { \n     javascript :   (( javascript ,   js ),   ( JavaScript/JavaScript ,   JavaScriptNext - ES6 Syntax/JavaScriptNext ))  }   For a list of all currently supported syntax mappings, see the official  mapping file .   Tip  When submitting new languages to the mapping table, it is encouraged to pick key names that correspond to what is used in Pygments so a User can switch between Pygments' and Sublime's syntax highlighter and still get highlighting.", 
            "title": "mdpopups.sublime_user_lang_map"
        }, 
        {
            "location": "/api/", 
            "text": "API\n\ue157\n\n\nDependencies\n\ue157\n\n\nYour plugin should include the Package Control dependencies listed below. Currently, you can get away with not including \npyyaml\n and \npymdownx\n, but in the future, this will not be the case. Please read about Package Control's \ndependencies\n to learn more.\n\n\n{\n\n    \n*\n:\n \n{\n\n        \n=3124\n:\n \n[\n\n            \npygments\n,\n\n            \npython-markdown\n,\n\n            \nmdpopups\n,\n\n            \npython-jinja2\n,\n\n            \nmarkupsafe\n,\n\n            \npymdownx\n,\n\n            \npyyaml\n\n        \n]\n\n    \n}\n\n\n}\n\n\n\n\n\nCheck out \nmdpopup_test\n as an example. Clone it into \nPackages/mdpopup_test\n, run \nPackage Control: Satisfy dependencies\n, and then restart Sublime. You should be able to then run the command \nMdpopups: Test\n to see an example popup or phantom.  Feel free to edit it to learn more.\n\n\nMarkdown Support\n\ue157\n\n\nMdPopups uses \nPython Markdown\n to parse Markdown and transform it into a Sublime popup or phantom. The Markdown environment supports basic Markdown syntax, but also includes a number of specialty extensions to enhance and extend the Markdown environment.\n\n\nDue to the \nminihtml\n environment that Sublime uses, the type of tags and CSS that can be used are a bit limited. MdPopups provides a CSS that includes most of the common supported tags that can be used. Then few specific extensions (that work well within the \nminihtml\n environment) have been selected to provide support for a some additional useful features.\n\n\nPrior to version 2.0.0, the default extensions and extension configurations were locked down, but starting with 2.1.0, this restriction has been mostly removed. Not all Python Markdown extensions and extension options are compatible with Sublime's \nminihtml\n environment, and extensions like \nmarkdown.extensions.extra\n can include some extensions that are not compatible, but there are a number of additional extension and extension options that can be used beyond what is provided by default. In general, it is recommended to include each plugin individual on a case by case basis and disable features that aren't compatible.\n\n\nBelow we will touch on the specific extensions used by default which are known to work in the Sublime \nminihtml\n environment. If you are on version 2.1.0+, read on in \nFrontmatter\n to learn how to customize extensions.\n\n\nExtensions\n\ue157\n\n\nThese three extensions are setup and configured automatically and should not be configured manually. Also, do not try to use \nmarkdown.extensions.codehilite\n or \nmarkdown.extensions.fenced_code\n as the following extensions have been specifically altered to output Sublime syntax highlighting properly and will clash with \nmarkdown.extensions.codehilite\n and \nmarkdown.extensions.fenced_code\n.\n\n\n\n\n\n\nmdpopups.mdx.highlight\n ( a modified version \npymdownx.highlight\n for Sublime Text highlighting) controls and configures the highlighting of code blocks.\n\n\n\n\n\n\nmdpopups.mdx.superfences\n (a modified version \npymdownx.superfences\n for Sublime Text highlighting) that provides support for nested fenced blocks.\n\n\n\n\n\n\nmdpopups.mdx.inlinehilite\n (a modified version of [\npymdownx.inlinehilite\n] for Sublime Text highlighting) allows for inline code highlighting: \n`#!python import module`\n \n \nimport\n \nmodule\n. Please don't use this version.\n\n\n\n\n\n\nThese extensions are provided by Python Markdown:\n\n\n\n\n\n\nmarkdown.extensions.attr_list\n allows you to add HTML attributes to block and inline elements easily.\n\n\n\n\n\n\nmarkdown.extensions.nl2br\n turns new lines into \nbr\n tags.\n\n\n\n\n\n\nmarkdown.extensions.def_list\n adds support for definition lists.\n\n\n\n\n\n\nmarkdown.extensions.admonition\n provides admonition blocks.\n\n\n\n\n\n\nThese are 3\nrd\n party extensions provided by PyMdown Extensions:\n\n\n\n\n\n\npymdownx.betterem\n is an extension that aims to improve upon emphasis support in Python Markdown. MdPopups leaves it configured in its default state where underscores are handled intelligently: \n_handled_intelligently_\n \n \nhandled_intelligently\n and asterisks can be used to do mid word emphasis: \nem*pha*sis\n \n em\npha\nsis.\n\n\n\n\n\n\npymdownx.magiclink\n auto links HTML and email links.  In \n2.1.0\n+, it also allows the shortening of common repository pull request, issue, and commit links (if configured).\n\n\n\n\n\n\npymdownx.extrarawhtml\n allows you to add \nmarkdown=\n1\n to raw, block HTML elements to allow content under them to be parsed with Python markdown (inline tags should already have their content parsed).  This module is exposing \njust\n this functionality from the \nPython Markdown's Extra extension\n as the feature could not be enabled without including all of the \nExtra\n extensions other features.  You can read the Python Markdown's Extra extension documentation to learn more about this feature.\n\n\n\n\n\n\nFrontmatter\n\ue157\n\n\nFrontmatter can be used to configure content in 2.1.0+. The frontmatter must be specified, starting on the first line of the content, before the Markdown.  The frontmatter content should be in YAML syntax and should come between the YAML markers: \n---\n.\n\n\n---\n\n\n# yaml content\n\n\n---\n\n\n\n\n\nOptionally the content can use the ending \n...\n as shown below:\n\n\n---\n\n\n# yaml content\n\n\n...\n\n\n\n\n\nAt the base level, the YAML content is a hash table containing key value pairs.\n\n\n---\n\n\nkey1\n:\n \nvalue1\n\n\nkey2\n:\n \nvalue2\n\n\n...\n\n\n\n\n\nEnable Code Wrapping\n\ue157\n\n\nThe \nallow_code_wrap\n setting allows block code tags to have their content wrapped. If disabled (the default), code content will not wrap lines.\n\n\n---\n\n\nallow_code_wrap\n:\n \ntrue\n\n\n...\n\n\n\n\n\nCustom Fences\n\ue157\n\n\nThe included \nmdpopups.mdx.superfences\n has an option that allows for custom fences. Custom fences are a convenient way to add support for special block content such as UML diagrams. Since configuring \nmdpopups.mdx.superfences\n is not allowed directly, you can setup your own custom fences via a separate \ncustom_fences\n option. See the original SuperFences' \nCustom Fences\n documentation to learn more.\n\n\n---\n\n\ncustom_fences\n:\n\n\n-\n \nname\n:\n \numl\n\n  \nclass\n:\n \numl\n\n  \nformat\n:\n \n!!python/name:mdpopup_test.plantuml.uml_format\n\n\n...\n\n\n\n\n\nCheckout \nmdpopup_test\n to see the UML example above in action.\n\n\nConfigure Markdown Extensions\n\ue157\n\n\nCustom extension configurations are specified under the \nmarkdown_extensions\n key whose value is an array of extensions. Each extension is specified as a string.  If you have specific settings to configure for an extension, simply make that array entry a dictionary where the key name is the extension name, and value is a hash table with all the settings.  The default configuration is below.\n\n\n---\n\n\nmarkdown_extensions\n:\n\n\n-\n \nmarkdown.extensions.admonition\n\n\n-\n \nmarkdown.extensions.attr_list\n\n\n-\n \nmarkdown.extensions.def_list\n\n\n-\n \nmarkdown.extensions.nl2br\n\n\n-\n \npymdownx.betterem\n\n\n-\n \npymdownx.magiclink\n\n\n-\n \npymdownx.extrarawhtml\n\n\n...\n\n\n\n\n\nNotice that \nmdpopups.mdx.highlight\n, \nmdpopups.mdx.superfences\n, and \nmdpopups.mdx.inlinehilite\n are not shown here as they cannot be set directly and are handled by automatically by MdPopups.\n\n\nLet's say we wanted to keep the default extensions, but we wanted to enable \npymdown.magiclink\n's repository URL shortening and add and configure \npymdownx.keys\n, \npymdownx.escapeall\n, \npymdownx.smartsymbols\n, and \nmarkdown.extensions.smarty\n. We must specify the full configuration we would like. We will use the base default settings outlined above, adding our new options and extensions.\n\n\n---\n\n\nmarkdown_extensions\n:\n\n\n-\n \nmarkdown.extensions.admonition\n\n\n-\n \nmarkdown.extensions.attr_list\n\n\n-\n \nmarkdown.extensions.def_list\n\n\n-\n \nmarkdown.extensions.nl2br\n\n\n-\n \nmarkdown.extensions.smarty\n:\n\n    \nsmart_quotes\n:\n \nfalse\n\n\n-\n \npymdownx.betterem\n\n\n-\n \npymdownx.magiclink\n:\n\n    \nbase_repo_url\n:\n \nhttps://github.com/facelessuser/sublime-markdown-popups\n\n    \nrepo_url_shortener\n:\n \ntrue\n\n\n-\n \npymdownx.extrarawhtml\n\n\n-\n \npymdownx.keys\n\n\n-\n \npymdownx.escapeall\n:\n\n    \nhardbreak\n:\n \ntrue\n\n    \nnbsp\n:\n \ntrue\n\n\n-\n \npymdownx.smartsymbols\n:\n\n    \nordinal_numbers\n:\n \nfalse\n\n\n...\n\n\n\n\n\nConfigure Frontmatter From Python Objects\n\ue157\n\n\nA lot of times in plugins, it may be easier to build up a Python dictionary and convert it to YAML.  MdPopups provides a function to exactly this:\n\n\nfrontmatter\n \n=\n \n{\n\n    \nallow_code_wrap\n:\n \nfalse\n,\n\n    \nmarkdown_extensions\n:\n \n[\n\n        \nmarkdown.extensions.admonition\n,\n\n        \nmarkdown.extensions.attr_list\n,\n\n        \nmarkdown.extensions.def_list\n,\n\n        \nmarkdown.extensions.nl2br\n,\n\n        \n# Smart quotes always have corner cases that annoy me, so don\nt bother with them.\n\n        \n{\nmarkdown.extensions.smarty\n:\n \n{\nsmart_quotes\n:\n \nFalse\n}},\n\n        \npymdownx.betterem\n,\n\n        \n{\n\n            \npymdownx.magiclink\n:\n \n{\n\n                \nrepo_url_shortener\n:\n \nTrue\n,\n\n                \nbase_repo_url\n:\n \nhttps://github.com/facelessuser/sublime-markdown-popups\n\n            \n}\n\n        \n},\n\n        \npymdownx.extrarawhtml\n,\n\n        \npymdownx.keys\n,\n\n        \n{\npymdownx.escapeall\n:\n \n{\nhardbreak\n:\n \nTrue\n,\n \nnbsp\n:\n \nTrue\n}},\n\n        \n# Sublime doesn\nt support superscript, so no ordinal numbers\n\n        \n{\npymdownx.smartsymbols\n:\n \n{\nordinal_numbers\n:\n \nFalse\n}}\n\n    \n]\n\n\n}\n\n\n\ncontent\n \n=\n \nmdpopups\n.\nformat_frontmatter\n(\nfrontmatter\n)\n \n+\n \nmarkdown_content\n\n\n\n\n\nStyling\n\ue157\n\n\nPopups and phantoms are styled with CSS that is fed through the Jinja2 template engine. A default CSS is provided that styles commonly used elements. Plugins can provide CSS to add additional styling for plugin specific purposes. See \nCSS Styling\n to learn more about the template engine and general styling info.\n\n\nIt is advised to use the \nwrapper_class\n option of the \nshow_popup\n, \nupdate_popup\n, and \nadd_phantom\n commands to wrap your plugin content in a div with a unique, plugin specific class.  This way plugins can inject CSS to style their specific elements via \n.\nmdpopups\n \n.\nmyplugin-wrapper\n \n.\nmyclass\n \n{}\n or simply \n.\nmyplugin-wrapper\n \n.\nmyclass\n \n{}\n.\n\n\nAlso check out the included Python Markdown \nattr_list\n extension syntax\n. This is a good extension for applying classes directly to elements within Markdown format. Sometimes it can be difficult to target certain kinds of block elements, so if all else fails, you can insert raw HTML for specific elements into your Markdown and apply classes directly to them.\n\n\nAPI Usage\n\ue157\n\n\nMdPopups provides a number of accessible functions.\n\n\nVersion\n\ue157\n\n\n\n\n(int,) mdpopups.version\n\n\nReturns the version of the MdPopups library.  Returns a tuple of integers which represents the major, minor, and patch version.\n\n\n\n\nShow Popup\n\ue157\n\n\n\n\nmdpopups.show_popup\n\n\n\n\nAccepts Markdown and creates a Sublime popup.  By default, the built-in Sublime syntax highlighter will be used for code highlighting.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nview\n\n\nsublime\n.\nView\n\n\n\n\nA Sublime Text view object.\n\n\n\n\n\n\ncontent\n\n\nstr\n\n\n\n\nMarkdown/HTML content for the popup.\n\n\n\n\n\n\nmd\n\n\nbool\n\n\nTrue\n\n\nDefines whether the content is Markdown and needs to be converted.\n\n\n\n\n\n\ncss\n\n\nstr\n\n\nNone\n\n\nAdditional CSS that will be injected.\n\n\n\n\n\n\nflags\n\n\nint\n\n\n0\n\n\nFlags to pass down to the Sublime Text \nview.show_popup\n call.\n\n\n\n\n\n\nlocation\n\n\nint\n\n\n-\n1\n\n\nLocation to show popup in view.  -1 means to show right under the first cursor.\n\n\n\n\n\n\nmax_width\n\n\nint\n\n\n320\n\n\nMaximum width of the popup.\n\n\n\n\n\n\nmax_height\n\n\nint\n\n\n240\n\n\nMaximum height of the popup.\n\n\n\n\n\n\non_navigate\n\n\ndef\n \nfn\n()\n\n\nNone\n\n\nCallback that receives one variable \nhref\n.\n\n\n\n\n\n\non_hide\n\n\ndef\n \nfn\n()\n\n\nNone\n\n\nCallback for when the popup is hidden.\n\n\n\n\n\n\nwrapper_class\n\n\nstr\n\n\nNone\n\n\nA string containing the class name you wish wrap your content in.  A \ndiv\n will be created with the given class.\n\n\n\n\n\n\ntemplate_vars\n\n\ndict\n\n\nNone\n\n\nA dictionary containing template vars.  These can be used in either the CSS or the HTML/Markdown content. These vars are found under the object \nplugin\n.\n\n\n\n\n\n\ntemplate_env_options\n\n\ndict\n\n\nNone\n\n\nA dictionary containing options for the Jinja2 template environment. This \nonly\n applies to the \nHTML/Markdown\n content.\n\n\n\n\n\n\nnl2br\n\n\nbool\n\n\nTrue\n\n\nDetermines whether the newline to \nbr\n Python Markdown extension is enabled or not. Will be ignored if \nmarkdown_extensions\n is configured in YAML frontmatter.\n\n\n\n\n\n\nallow_code_wrap\n\n\nbool\n\n\nFalse\n\n\nDo not convert all the spaces in code blocks to \nnbsp;\n so that wrapping can occur. YAML frontmatter's \nallow_code_wrap\n will always be used instead of this if specified.\n\n\n\n\n\n\n\n\n\n\nDeprecation\n\n\nIn 2.1.0 \nnl2br\n and \nalow_code_wrap\n are deprecated. The legacy parameters here will be dropped by 2018 for \nST3\n and these settings will not carry over to \nST4\n.\n\n\nTo disable \nnl2br\n, you can customize which extensions get loaded; see \nConfigure Markdown Extensions\n.\n\n\nTo enable code wrapping, see \nEnable Code Wrapping\n.\n\n\n\n\n\n\n\n\nUpdate Popup\n\ue157\n\n\n\n\nmdpopups.update_popup\n\n\n\n\nUpdates the current existing popup.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nview\n\n\nsublime\n.\nView\n\n\n\n\nA Sublime Text view object.\n\n\n\n\n\n\ncontent\n\n\nstr\n\n\n\n\nMarkdown/HTML content for the popup.\n\n\n\n\n\n\nmd\n\n\nbool\n\n\nTrue\n\n\nDefines whether the content is Markdown and needs to be converted.\n\n\n\n\n\n\ncss\n\n\nstr\n\n\nNone\n\n\nAdditional CSS that will be injected.\n\n\n\n\n\n\nwrapper_class\n\n\nstr\n\n\nNone\n\n\nA string containing the class name you wish wrap your content in.  A \ndiv\n will be created with the given class.\n\n\n\n\n\n\ntemplate_vars\n\n\ndict\n\n\nNone\n\n\nA dictionary containing template vars.  These can be used in either the CSS or the HTML/Markdown content. These vars are found under the object \nplugin\n.\n\n\n\n\n\n\ntemplate_env_options\n\n\ndict\n\n\nNone\n\n\nA dictionary containing options for the Jinja2 template environment. This \nonly\n applies to the \nHTML/Markdown\n content.\n\n\n\n\n\n\nnl2br\n\n\nbool\n\n\nTrue\n\n\nDetermines whether the newline to \nbr\n Python Markdown extension is enabled or not. Will be ignored if \nmarkdown_extensions\n is configured in YAML frontmatter.\n\n\n\n\n\n\nallow_code_wrap\n\n\nbool\n\n\nFalse\n\n\nDo not convert all the spaces in code blocks to \nnbsp;\n so that wrapping can occur. YAML frontmatter's \nallow_code_wrap\n will always be used instead of this if specified.\n\n\n\n\n\n\n\n\n\n\nDeprecation\n\n\nIn 2.1.0 \nnl2br\n and \nalow_code_wrap\n are deprecated. The legacy parameters here will be dropped by 2018 for \nST3\n and these settings will not carry over to \nST4\n.\n\n\nTo disable \nnl2br\n, you can customize which extensions get loaded; see \nConfigure Markdown Extensions\n.\n\n\nTo enable code wrapping, see \nEnable Code Wrapping\n.\n\n\n\n\n\n\n\n\nHide Popup\n\ue157\n\n\n\n\nmdpopups.hide_popup\n\n\n\n\nHides the current popup.  Included for convenience and consistency.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nview\n\n\nsublime\n.\nView\n\n\n\n\nA Sublime Text view object.\n\n\n\n\n\n\n\n\n\n\n\n\nIs Popup Visible\n\ue157\n\n\n\n\nbool mdpopups.is_popup_visible\n\n\n\n\nChecks if popup is visible in the view. Included for convenience and consistency.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nview\n\n\nsublime\n.\nView\n\n\n\n\nA Sublime Text view object.\n\n\n\n\n\n\n\n\n\n\n\n\nAdd Phantom\n\ue157\n\n\n\n\nint mdpopups.add_phantom\n\n\n\n\nAdds a phantom to the view and returns the phantom id as an integer. By default, the built-in Sublime syntax highlighter will be used for code highlighting. \n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nview\n\n\nsublime\n.\nView\n\n\n\n\nA Sublime Text view object.\n\n\n\n\n\n\nkey\n\n\nstr\n\n\n\n\nA key that is associated with the given phantom.  Multiple phantoms can share the same key, but each phantom will have its own id.\n\n\n\n\n\n\nregion\n\n\nsublime\n.\nRegion\n\n\n\n\nRegion in the view where the phantom should be inserted.\n\n\n\n\n\n\ncontent\n\n\nstr\n\n\n\n\nMarkdown/HTML content for the phantom.\n\n\n\n\n\n\nlayout\n\n\nint\n\n\n\n\nHow the HTML content should be inserted.  Acceptable values are: \nsublime.LAYOUT_INLINE\n, \nsublime.LAYOUT_BLOCK\n, and \nsublime.LAYOUT_BELOW\n.\n\n\n\n\n\n\nmd\n\n\nbool\n\n\nTrue\n\n\nDefines whether the content is Markdown and needs to be converted.\n\n\n\n\n\n\ncss\n\n\nstr\n\n\nNone\n\n\nAdditional CSS that will be injected.\n\n\n\n\n\n\non_navigate\n\n\ndef\n \nfn\n()\n\n\nNone\n\n\nCallback that receives one variable \nhref\n.\n\n\n\n\n\n\nwrapper_class\n\n\nstr\n\n\nNone\n\n\nA string containing the class name you wish wrap your content in.  A \ndiv\n will be created with the given class.\n\n\n\n\n\n\ntemplate_vars\n\n\ndict\n\n\nNone\n\n\nA dictionary containing template vars.  These can be used in either the CSS or the HTML/Markdown content.A dictionary containing template vars.  These can be used in either the CSS or the HTML/Markdown content. These vars are found under the object \nplugin\n.\n\n\n\n\n\n\ntemplate_env_options\n\n\ndict\n\n\nNone\n\n\nA dictionary containing options for the Jinja2 template environment. This \nonly\n applies to the \nHTML/Markdown\n content. Content plugin vars are found under the object: \nplugin\n.A dictionary containing options for the Jinja2 template environment. This \nonly\n applies to the \nHTML/Markdown\n content.\n\n\n\n\n\n\nnl2br\n\n\nbool\n\n\nTrue\n\n\nDetermines whether the newline to \nbr\n Python Markdown extension is enabled or not. Will be ignored if \nmarkdown_extensions\n is configured in YAML frontmatter.\n\n\n\n\n\n\nallow_code_wrap\n\n\nbool\n\n\nFalse\n\n\nDo not convert all the spaces in code blocks to \nnbsp;\n so that wrapping can occur. YAML frontmatter's \nallow_code_wrap\n will always be used instead of this if specified.\n\n\n\n\n\n\n\n\n\n\nDeprecation\n\n\nIn 2.1.0 \nnl2br\n and \nalow_code_wrap\n are deprecated. The legacy parameters here will be dropped by 2018 for \nST3\n and these settings will not carry over to \nST4\n.\n\n\nTo disable \nnl2br\n, you can customize which extensions get loaded; see \nConfigure Markdown Extensions\n.\n\n\nTo enable code wrapping, see \nEnable Code Wrapping\n.\n\n\n\n\n\n\n\n\nErase Phantoms\n\ue157\n\n\n\n\nmdpopups.erase_phantoms\n\n\n\n\nErase all phantoms associated with the given key. Included for convenience and consistency.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nview\n\n\nsublime\n.\nView\n\n\n\n\nA Sublime Text view object.\n\n\n\n\n\n\nkey\n\n\nstr\n\n\n\n\nA key that is associated with phantoms.  Multiple phantoms can share the same key, but each phantom will have its own id.\n\n\n\n\n\n\n\n\n\n\n\n\nErase Phantom by ID\n\ue157\n\n\n\n\nmdpopups.erase_phantom_by_id\n\n\n\n\nErase a single phantom by its id.  Included for convenience and consistency.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nview\n\n\nsublime\n.\nView\n\n\n\n\nA Sublime Text view object.\n\n\n\n\n\n\npid\n\n\nstr\n\n\n\n\nThe id associated with a single phantom.  Multiple phantoms can share the same key, but each phantom will have its own id.\n\n\n\n\n\n\n\n\n\n\n\n\nQuery Phantom\n\ue157\n\n\n\n\n[sublime.Region] mdpopups.query_phantom\n\n\n\n\nQuery the location of a phantom by specifying its id.  A list of \nsublime.Region\ns will be returned.  If the phantom with the given id is not found, the region will be returned with positions of \n(-1, -1)\n.  Included for convenience and consistency.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nview\n\n\nsublime\n.\nView\n\n\n\n\nA Sublime Text view object.\n\n\n\n\n\n\npid\n\n\nint\n\n\n\n\nThe id associated with a single phantom.  Multiple phantoms can share the same key, but each phantom will have its own id.\n\n\n\n\n\n\n\n\n\n\n\n\nQuery Phantoms\n\ue157\n\n\n\n\n[sublime.Region] mdpopups.query_phantoms\n\n\n\n\nQuery the location of multiple phantoms by specifying their ids.  A list of \nsublime.Region\ns will be returned where each index corresponds to the index of ids that was passed in.  If a given phantom id is not found, that region will be returned with positions of \n(-1, -1)\n.  Included for convenience and consistency.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nview\n\n\nsublime\n.\nView\n\n\n\n\nA Sublime Text view object.\n\n\n\n\n\n\npids\n\n\n[\nint\n]\n\n\n\n\nA list of ids associated with phantoms.  Multiple phantoms can share the same key, but each phantom will have its own id.\n\n\n\n\n\n\n\n\n\n\n\n\nPhantom Class\n\ue157\n\n\n\n\nmdpopups.Phantoms\n\n\n\n\nA phantom object for use with \nPhantomSet\n.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nregion\n\n\nsublime\n.\nRegion\n\n\n\n\nRegion in the view where the phantom should be inserted.\n\n\n\n\n\n\ncontent\n\n\nstr\n\n\n\n\nMarkdown/HTML content for the phantom.\n\n\n\n\n\n\nlayout\n\n\nint\n\n\n\n\nHow the HTML content should be inserted.  Acceptable values are: \nsublime.LAYOUT_INLINE\n, \nsublime.LAYOUT_BLOCK\n, and \nsublime.LAYOUT_BELOW\n.\n\n\n\n\n\n\nmd\n\n\nbool\n\n\nTrue\n\n\nDefines whether the content is Markdown and needs to be converted.\n\n\n\n\n\n\ncss\n\n\nstr\n\n\nNone\n\n\nAdditional CSS that will be injected.\n\n\n\n\n\n\non_navigate\n\n\ndef\n \nfn\n()\n\n\nNone\n\n\nCallback that receives one variable \nhref\n.\n\n\n\n\n\n\nwrapper_class\n\n\nstr\n\n\nNone\n\n\nA string containing the class name you wish wrap your content in.  A \ndiv\n will be created with the given class.\n\n\n\n\n\n\ntemplate_vars\n\n\ndict\n\n\nNone\n\n\nA dictionary containing template vars.  These can be used in either the CSS or the HTML/Markdown content.A dictionary containing template vars.  These can be used in either the CSS or the HTML/Markdown content. These vars are found under the object \nplugin\n.\n\n\n\n\n\n\ntemplate_env_options\n\n\ndict\n\n\nNone\n\n\nA dictionary containing options for the Jinja2 template environment. This \nonly\n applies to the \nHTML/Markdown\n content. Content plugin vars are found under the object: \nplugin\n.A dictionary containing options for the Jinja2 template environment. This \nonly\n applies to the \nHTML/Markdown\n content.\n\n\n\n\n\n\nnl2br\n\n\nbool\n\n\nTrue\n\n\nDetermines whether the newline to \nbr\n Python Markdown extension is enabled or not. Will be ignored if \nmarkdown_extensions\n is configured in YAML frontmatter.\n\n\n\n\n\n\nallow_code_wrap\n\n\nbool\n\n\nFalse\n\n\nDo not convert all the spaces in code blocks to \nnbsp;\n so that wrapping can occur. YAML frontmatter's \nallow_code_wrap\n will always be used instead of this if specified.\n\n\n\n\n\n\n\n\nAttributes\n\n\n\n\n\n\n\n\nAttribute\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nregion\n\n\nsublime\n.\nRegion\n\n\nRegion in the view where the phantom should be inserted.\n\n\n\n\n\n\ncontent\n\n\nstr\n\n\nMarkdown/HTML content for the phantom.\n\n\n\n\n\n\nlayout\n\n\nint\n\n\nHow the HTML content should be inserted.  Acceptable values are: \nsublime.LAYOUT_INLINE\n, \nsublime.LAYOUT_BLOCK\n, and \nsublime.LAYOUT_BELOW\n.\n\n\n\n\n\n\nmd\n\n\nbool\n\n\nDefines whether the content is Markdown and needs to be converted.\n\n\n\n\n\n\ncss\n\n\nstr\n\n\nAdditional CSS that will be injected.\n\n\n\n\n\n\non_navigate\n\n\ndef\n \nfn\n()\n\n\nCallback that receives one variable \nhref\n.\n\n\n\n\n\n\nwrapper_class\n\n\nstr\n\n\nA string containing the class name you wish wrap your content in.  A \ndiv\n will be created with the given class.\n\n\n\n\n\n\ntemplate_vars\n\n\ndict\n\n\nA dictionary containing template vars.  These can be used in either the CSS or the HTML/Markdown content.A dictionary containing template vars.  These can be used in either the CSS or the HTML/Markdown content. These vars are found under the object \nplugin\n.\n\n\n\n\n\n\ntemplate_env_options\n\n\ndict\n\n\nA dictionary containing options for the Jinja2 template environment. This \nonly\n applies to the \nHTML/Markdown\n content. Content plugin vars are found under the object: \nplugin\n.A dictionary containing options for the Jinja2 template environment. This \nonly\n applies to the \nHTML/Markdown\n content.\n\n\n\n\n\n\nnl2br\n\n\nbool\n\n\nTrue\n\n\n\n\n\n\nallow_code_wrap\n\n\nbool\n\n\nFalse\n\n\n\n\n\n\n\n\n\n\nDeprecation\n\n\nIn 2.1.0 \nnl2br\n and \nalow_code_wrap\n are deprecated. The legacy parameters here will be dropped by 2018 for \nST3\n and these settings will not carry over to \nST4\n.\n\n\nTo disable \nnl2br\n, you can customize which extensions get loaded; see \nConfigure Markdown Extensions\n.\n\n\nTo enable code wrapping, see \nEnable Code Wrapping\n.\n\n\n\n\n\n\n\n\nPhantom Set Class\n\ue157\n\n\n\n\nmdpopups.PhantomSet\n\n\n\n\nA class that allows you to update phantoms under the specified key.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nview\n\n\nsublime\n.\nView\n\n\n\n\nA Sublime Text view object.\n\n\n\n\n\n\nkey\n\n\nstr\n\n\n\n\nThe key that should be associated with all related phantoms in the set.\n\n\n\n\n\n\n\n\nMethods\n\n\n\n\nmdpopups.PhantomSet.update\n\n\n\n\nUpdate all the phantoms in the set with the given phantom list.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnew_phantoms\n\n\n[\nmdpopups\n.\nPhantom\n]\n\n\n\n\nA list of MdPopups phantoms. \nsublime.Phantom\n will be converted to \nmdpopups.Phantom\n.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nClear Cache\n\ue157\n\n\n\n\nmdpopups.clear_cache\n\n\nClears the CSS theme related caches.\n\n\n\n\nMarkdown to HTML\n\ue157\n\n\n\n\nmdpopups.md2html\n\n\n\n\nExposes the Markdown to HTML converter in case it is desired to parse only a section of markdown.  This works well for someone who wants to work directly in HTML, but might want to still have fragments of markdown that they would like to occasionally convert. By default, the built-in Sublime syntax highlighter will be used for code highlighting.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nview\n\n\nsublime\n.\nView\n\n\nYes\n\n\n\n\nSublime text View object.\n\n\n\n\n\n\nmarkup\n\n\nstring\n\n\nYes\n\n\n\n\nThe markup code to be converted.\n\n\n\n\n\n\ntemplate_vars\n\n\ndict\n\n\nNo\n\n\nNone\n\n\nA dictionary containing template vars.  These can be used in either the CSS or the HTML/Markdown content.A dictionary containing template vars.  These can be used in either the CSS or the HTML/Markdown content. These vars are found under the object \nplugin\n.\n\n\n\n\n\n\ntemplate_env_options\n\n\ndict\n\n\nNo\n\n\nNone\n\n\nA dictionary containing options for the Jinja2 template environment. This \nonly\n applies to the \nHTML/Markdown\n content. Content plugin vars are found under the object: \nplugin\n.A dictionary containing options for the Jinja2 template environment. This \nonly\n applies to the \nHTML/Markdown\n content.\n\n\n\n\n\n\nnl2br\n\n\nbool\n\n\nTrue\n\n\nDetermines whether the newline to \nbr\n Python Markdown extension is enabled or not. Will be ignored if \nmarkdown_extensions\n is configured in YAML frontmatter.\n\n\n\n\n\n\n\n\nallow_code_wrap\n\n\nbool\n\n\nFalse\n\n\nDo not convert all the spaces in code blocks to \nnbsp;\n so that wrapping can occur. YAML frontmatter's \nallow_code_wrap\n will always be used instead of this if specified.\n\n\n\n\n\n\n\n\n\n\n\n\nDeprecation\n\n\nIn 2.1.0 \nnl2br\n and \nalow_code_wrap\n are deprecated. The legacy parameters here will be dropped by 2018 for \nST3\n and these settings will not carry over to \nST4\n.\n\n\nTo disable \nnl2br\n, you can customize which extensions get loaded; see \nConfigure Markdown Extensions\n.\n\n\nTo enable code wrapping, see \nEnable Code Wrapping\n.\n\n\n\n\n\n\n\n\nColor Box\n\ue157\n\n\n\n\nstring mdpopups.color_box\n\n\n\n\nGenerates a color preview box image encoded in base 64 and formatted to be inserted right in your your Markdown or HTML code as an \nimg\n tag.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncolors\n\n\n[\nstr\n]\n\n\n\n\nA list of color strings formatted as \n#RRGGBBAA\n where \nR\n is the red channel, \nG\n is the green channel, \nB\n is the blue channel, and \nA\n is the alpha channel.\n\n\n\n\n\n\nborder\n\n\nstr\n\n\n\n\nThe color for the color box border.  Input is a RGB color formatted as \n#RRGGBB\n.\n\n\n\n\n\n\nborder2\n\n\nstr\n\n\nNone\n\n\nThe optional secondary border color.  This is great if you are going to have it on a light and dark backgrounds.  You can use a double border so the color stands out regardless of the background.  Input is a RGB color formatted as \n#RRGGBB\n.\n\n\n\n\n\n\nheight\n\n\nint\n\n\n32\n\n\nHeight of color box.\n\n\n\n\n\n\nwidth\n\n\nint\n\n\n32\n\n\nWidth of color box.\n\n\n\n\n\n\nborder_size\n\n\nint\n\n\n1\n\n\nWidth of the color box border.  If using \nborder2\n, the value should be set to at least 2 to see both colors.\n\n\n\n\n\n\ncheck_size\n\n\nint\n\n\n4\n\n\nSize of checkered box squares used for the background of transparent colors.\n\n\n\n\n\n\nmax_colors\n\n\nint\n\n\n5\n\n\nMax number of colors that will be evaluated in the \ncolors\n parameter.  Multiple colors are used to to create palette boxes showing multiple colors lined up horizontally.\n\n\n\n\n\n\nalpha\n\n\nbool\n\n\nFalse\n\n\nWill create color box images with a real alpha channel instead of simulating one with a checkered background.\n\n\n\n\n\n\nborder_map\n\n\nint\n\n\n0xF\n\n\nA mapping of which borders to show.  Where \n0x1\n is \nTOP\n, \n0x2\n is \nLEFT\n, \n0x4\n is \nBOTTOM\n, \n0x8\n is \nRIGHT\n.  Map flags can be accessed via \nmdpopups.colorbox.TOP\n etc.\n\n\n\n\n\n\n\n\n\n\n\n\nColor Box Raw\n\ue157\n\n\n\n\nbytes mdpopups.color_box\n\n\n\n\nGenerates a color preview box image and returns the raw byte string of the image.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncolors\n\n\n[\nstr\n]\n\n\n\n\nA list of color strings formatted as \n#RRGGBBAA\n where \nR\n is the red channel, \nG\n is the green channel, \nB\n is the blue channel, and \nA\n is the alpha channel.\n\n\n\n\n\n\nborder\n\n\nstr\n\n\n\n\nThe color for the color box border.  Input is a RGB color formatted as \n#RRGGBB\n.\n\n\n\n\n\n\nborder2\n\n\nstr\n\n\nNone\n\n\nThe optional secondary border color.  This is great if you are going to have it on a light and dark backgrounds.  You can use a double border so the color stands out regardless of the background.  Input is a RGB color formatted as \n#RRGGBB\n.\n\n\n\n\n\n\nheight\n\n\nint\n\n\n32\n\n\nHeight of color box.\n\n\n\n\n\n\nwidth\n\n\nint\n\n\n32\n\n\nWidth of color box.\n\n\n\n\n\n\nborder_size\n\n\nint\n\n\n1\n\n\nWidth of the color box border.  If using \nborder2\n, the value should be set to at least 2 to see both colors.\n\n\n\n\n\n\ncheck_size\n\n\nint\n\n\n4\n\n\nSize of checkered box squares used for the background of transparent colors.\n\n\n\n\n\n\nmax_colors\n\n\nint\n\n\n5\n\n\nMax number of colors that will be evaluated in the \ncolors\n parameter.  Multiple colors are used to to create palette boxes showing multiple colors lined up horizontally.\n\n\n\n\n\n\nalpha\n\n\nbool\n\n\nFalse\n\n\nWill create color box images with a real alpha channel instead of simulating one with a checkered background.\n\n\n\n\n\n\nborder_map\n\n\nint\n\n\n0xF\n\n\nA mapping of which borders to show.  Where \n0x1\n is \nTOP\n, \n0x2\n is \nLEFT\n, \n0x4\n is \nBOTTOM\n, \n0x8\n is \nRIGHT\n.  Map flags can be accessed via \nmdpopups.colorbox.TOP\n etc.\n\n\n\n\n\n\n\n\n\n\n\n\nTint\n\ue157\n\n\n\n\nstring mdpopups.tint\n\n\n\n\nTakes a either a path to an PNG or a byte string of a PNG and tints it with a specific color and returns a string containing the base 64 encoded PNG in a HTML element.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nimg\n\n\nstr\n/\nbytes\n\n\n\n\nEither a string in the form \nPackages/Package/resource.png\n or a byte string of a PNG image.\n\n\n\n\n\n\ncolor\n\n\nstr\n\n\n\n\nA string in the form of \n#RRGGBB\n or \n#RRGGBBAA\n (alpha layer will be stripped and ignored and is only allowed to make it easy to pass in colors from a color scheme).\n\n\n\n\n\n\nopacity\n\n\nint\n\n\n255\n\n\nAn integer value between 0 - 255 that specifies the opacity of the tint.\n\n\n\n\n\n\nheight\n\n\nint\n\n\nNone\n\n\nHeight that should be specified in the return HTML element.\n\n\n\n\n\n\nwidth\n\n\nint\n\n\nNone\n\n\nWidth that should be specified in the return HTML element.\n\n\n\n\n\n\n\n\n\n\n\n\nTint Raw\n\ue157\n\n\n\n\nbytes mdpopups.tint_raw\n\n\n\n\nTakes a either a path to an PNG or a byte string of a PNG and tints it with a specific color and returns a byte string of the modified PNG.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nimg\n\n\nstr\n/\nbytes\n\n\n\n\nEither a string in the form \nPackages/Package/resource.png\n or a byte string of a PNG image.\n\n\n\n\n\n\ncolor\n\n\nstr\n\n\n\n\nA string in the form of \n#RRGGBB\n or \n#RRGGBBAA\n (alpha layer will be stripped and ignored and is only allowed to make it easy to pass in colors from a color scheme).\n\n\n\n\n\n\nopacity\n\n\nint\n\n\n255\n\n\nAn integer value between 0 - 255 that specifies the opacity of the tint.\n\n\n\n\n\n\n\n\n\n\n\n\nScope to Style\n\ue157\n\n\n\n\ndict mdpopups.scope2style\n\n\n\n\nTakes a sublime scope (complexity doesn't matter), and guesses the style that would be applied.  While there may be untested corner cases with complex scopes where it fails, in general, it is usually accurate.  The returned dictionary is in the form:\n\n\n{\n\n    \n# Colors will be None if not found,\n\n    \n# though usually, even if the scope has no color\n\n    \n# it will return the overall theme foreground.\n\n    \n#\n\n    \n# Background might be None if using `explicit_background`\n\n    \n# as it only returns a background if that style specifically\n\n    \n# defines a background.\n\n    \ncolor\n:\n \n#RRGGBB\n,\n\n    \nbackground\n:\n \n#RRGGBB\n,\n\n    \n# Style will usually be either \nbold\n, \nitalic\n.\n\n    \n# Multiple styles may be returned \nbold italic\n or an empty string \n.\n\n    \nstyle\n:\n \nbold italic\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nview\n\n\nsublime\n.\nView\n\n\n\n\nSublime text View object so that the correct color scheme will be searched.\n\n\n\n\n\n\nscope\n\n\nstring\n\n\n\n\nThe scope to search for.\n\n\n\n\n\n\nselected\n\n\nbool\n\n\nFalse\n\n\nWhether this scope is in a selected state (selected text).\n\n\n\n\n\n\nexplicit_background\n\n\nbool\n\n\nFalse\n\n\nOnly return a background if one is explicitly defined in the color scheme.\n\n\n\n\n\n\n\n\n\n\n\n\nSyntax Highlight\n\ue157\n\n\n\n\nmdpopups.syntax_highlight\n\n\n\n\nAllows for syntax highlighting outside the Markdown environment.  You can just feed it code directly and give it the language of your choice, and you will be returned a block of HTML that has been syntax highlighted. By default, the built-in Sublime syntax highlighter will be used for code highlighting.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nview\n\n\nsublime\n.\nView\n\n\n\n\nSublime text View object.\n\n\n\n\n\n\nsrc\n\n\nstr\n\n\n\n\nThe source code to be converted.  No fence tokes are needed (\n```\n).\n\n\n\n\n\n\nlanguage\n\n\nstr\n\n\nNone\n\n\nSpecifies the language to highlight as.\n\n\n\n\n\n\ninline\n\n\nbool\n\n\nFalse\n\n\nWill return the code formatted for inline display.\n\n\n\n\n\n\nallow_code_wrap\n\n\nbool\n\n\nFalse\n\n\nDo not convert all the spaces in code blocks to \nnbsp;\n so that wrapping can occur.\n\n\n\n\n\n\n\n\n\n\n\n\nGet Language From View\n\ue157\n\n\n\n\nmdpopups.get_language_from_view\n\n\n\n\nAllows a user to extract the equivalent language specifier for \nmdpopups.syntax_highlight\n from a view.  If the language cannot be determined, \nNone\n will be returned.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nview\n\n\nsublime\n.\nView\n\n\n\n\nSublime text View object.", 
            "title": "API"
        }, 
        {
            "location": "/api/#api", 
            "text": "", 
            "title": "API"
        }, 
        {
            "location": "/api/#dependencies", 
            "text": "Your plugin should include the Package Control dependencies listed below. Currently, you can get away with not including  pyyaml  and  pymdownx , but in the future, this will not be the case. Please read about Package Control's  dependencies  to learn more.  { \n     * :   { \n         =3124 :   [ \n             pygments , \n             python-markdown , \n             mdpopups , \n             python-jinja2 , \n             markupsafe , \n             pymdownx , \n             pyyaml \n         ] \n     }  }   Check out  mdpopup_test  as an example. Clone it into  Packages/mdpopup_test , run  Package Control: Satisfy dependencies , and then restart Sublime. You should be able to then run the command  Mdpopups: Test  to see an example popup or phantom.  Feel free to edit it to learn more.", 
            "title": "Dependencies"
        }, 
        {
            "location": "/api/#markdown-support", 
            "text": "MdPopups uses  Python Markdown  to parse Markdown and transform it into a Sublime popup or phantom. The Markdown environment supports basic Markdown syntax, but also includes a number of specialty extensions to enhance and extend the Markdown environment.  Due to the  minihtml  environment that Sublime uses, the type of tags and CSS that can be used are a bit limited. MdPopups provides a CSS that includes most of the common supported tags that can be used. Then few specific extensions (that work well within the  minihtml  environment) have been selected to provide support for a some additional useful features.  Prior to version 2.0.0, the default extensions and extension configurations were locked down, but starting with 2.1.0, this restriction has been mostly removed. Not all Python Markdown extensions and extension options are compatible with Sublime's  minihtml  environment, and extensions like  markdown.extensions.extra  can include some extensions that are not compatible, but there are a number of additional extension and extension options that can be used beyond what is provided by default. In general, it is recommended to include each plugin individual on a case by case basis and disable features that aren't compatible.  Below we will touch on the specific extensions used by default which are known to work in the Sublime  minihtml  environment. If you are on version 2.1.0+, read on in  Frontmatter  to learn how to customize extensions.", 
            "title": "Markdown Support"
        }, 
        {
            "location": "/api/#extensions", 
            "text": "These three extensions are setup and configured automatically and should not be configured manually. Also, do not try to use  markdown.extensions.codehilite  or  markdown.extensions.fenced_code  as the following extensions have been specifically altered to output Sublime syntax highlighting properly and will clash with  markdown.extensions.codehilite  and  markdown.extensions.fenced_code .    mdpopups.mdx.highlight  ( a modified version  pymdownx.highlight  for Sublime Text highlighting) controls and configures the highlighting of code blocks.    mdpopups.mdx.superfences  (a modified version  pymdownx.superfences  for Sublime Text highlighting) that provides support for nested fenced blocks.    mdpopups.mdx.inlinehilite  (a modified version of [ pymdownx.inlinehilite ] for Sublime Text highlighting) allows for inline code highlighting:  `#!python import module`     import   module . Please don't use this version.    These extensions are provided by Python Markdown:    markdown.extensions.attr_list  allows you to add HTML attributes to block and inline elements easily.    markdown.extensions.nl2br  turns new lines into  br  tags.    markdown.extensions.def_list  adds support for definition lists.    markdown.extensions.admonition  provides admonition blocks.    These are 3 rd  party extensions provided by PyMdown Extensions:    pymdownx.betterem  is an extension that aims to improve upon emphasis support in Python Markdown. MdPopups leaves it configured in its default state where underscores are handled intelligently:  _handled_intelligently_     handled_intelligently  and asterisks can be used to do mid word emphasis:  em*pha*sis    em pha sis.    pymdownx.magiclink  auto links HTML and email links.  In  2.1.0 +, it also allows the shortening of common repository pull request, issue, and commit links (if configured).    pymdownx.extrarawhtml  allows you to add  markdown= 1  to raw, block HTML elements to allow content under them to be parsed with Python markdown (inline tags should already have their content parsed).  This module is exposing  just  this functionality from the  Python Markdown's Extra extension  as the feature could not be enabled without including all of the  Extra  extensions other features.  You can read the Python Markdown's Extra extension documentation to learn more about this feature.", 
            "title": "Extensions"
        }, 
        {
            "location": "/api/#frontmatter", 
            "text": "Frontmatter can be used to configure content in 2.1.0+. The frontmatter must be specified, starting on the first line of the content, before the Markdown.  The frontmatter content should be in YAML syntax and should come between the YAML markers:  --- .  ---  # yaml content  ---   Optionally the content can use the ending  ...  as shown below:  ---  # yaml content  ...   At the base level, the YAML content is a hash table containing key value pairs.  ---  key1 :   value1  key2 :   value2  ...", 
            "title": "Frontmatter"
        }, 
        {
            "location": "/api/#enable-code-wrapping", 
            "text": "The  allow_code_wrap  setting allows block code tags to have their content wrapped. If disabled (the default), code content will not wrap lines.  ---  allow_code_wrap :   true  ...", 
            "title": "Enable Code Wrapping"
        }, 
        {
            "location": "/api/#custom-fences", 
            "text": "The included  mdpopups.mdx.superfences  has an option that allows for custom fences. Custom fences are a convenient way to add support for special block content such as UML diagrams. Since configuring  mdpopups.mdx.superfences  is not allowed directly, you can setup your own custom fences via a separate  custom_fences  option. See the original SuperFences'  Custom Fences  documentation to learn more.  ---  custom_fences :  -   name :   uml \n   class :   uml \n   format :   !!python/name:mdpopup_test.plantuml.uml_format  ...   Checkout  mdpopup_test  to see the UML example above in action.", 
            "title": "Custom Fences"
        }, 
        {
            "location": "/api/#configure-markdown-extensions", 
            "text": "Custom extension configurations are specified under the  markdown_extensions  key whose value is an array of extensions. Each extension is specified as a string.  If you have specific settings to configure for an extension, simply make that array entry a dictionary where the key name is the extension name, and value is a hash table with all the settings.  The default configuration is below.  ---  markdown_extensions :  -   markdown.extensions.admonition  -   markdown.extensions.attr_list  -   markdown.extensions.def_list  -   markdown.extensions.nl2br  -   pymdownx.betterem  -   pymdownx.magiclink  -   pymdownx.extrarawhtml  ...   Notice that  mdpopups.mdx.highlight ,  mdpopups.mdx.superfences , and  mdpopups.mdx.inlinehilite  are not shown here as they cannot be set directly and are handled by automatically by MdPopups.  Let's say we wanted to keep the default extensions, but we wanted to enable  pymdown.magiclink 's repository URL shortening and add and configure  pymdownx.keys ,  pymdownx.escapeall ,  pymdownx.smartsymbols , and  markdown.extensions.smarty . We must specify the full configuration we would like. We will use the base default settings outlined above, adding our new options and extensions.  ---  markdown_extensions :  -   markdown.extensions.admonition  -   markdown.extensions.attr_list  -   markdown.extensions.def_list  -   markdown.extensions.nl2br  -   markdown.extensions.smarty : \n     smart_quotes :   false  -   pymdownx.betterem  -   pymdownx.magiclink : \n     base_repo_url :   https://github.com/facelessuser/sublime-markdown-popups \n     repo_url_shortener :   true  -   pymdownx.extrarawhtml  -   pymdownx.keys  -   pymdownx.escapeall : \n     hardbreak :   true \n     nbsp :   true  -   pymdownx.smartsymbols : \n     ordinal_numbers :   false  ...", 
            "title": "Configure Markdown Extensions"
        }, 
        {
            "location": "/api/#configure-frontmatter-from-python-objects", 
            "text": "A lot of times in plugins, it may be easier to build up a Python dictionary and convert it to YAML.  MdPopups provides a function to exactly this:  frontmatter   =   { \n     allow_code_wrap :   false , \n     markdown_extensions :   [ \n         markdown.extensions.admonition , \n         markdown.extensions.attr_list , \n         markdown.extensions.def_list , \n         markdown.extensions.nl2br , \n         # Smart quotes always have corner cases that annoy me, so don t bother with them. \n         { markdown.extensions.smarty :   { smart_quotes :   False }}, \n         pymdownx.betterem , \n         { \n             pymdownx.magiclink :   { \n                 repo_url_shortener :   True , \n                 base_repo_url :   https://github.com/facelessuser/sublime-markdown-popups \n             } \n         }, \n         pymdownx.extrarawhtml , \n         pymdownx.keys , \n         { pymdownx.escapeall :   { hardbreak :   True ,   nbsp :   True }}, \n         # Sublime doesn t support superscript, so no ordinal numbers \n         { pymdownx.smartsymbols :   { ordinal_numbers :   False }} \n     ]  }  content   =   mdpopups . format_frontmatter ( frontmatter )   +   markdown_content", 
            "title": "Configure Frontmatter From Python Objects"
        }, 
        {
            "location": "/api/#styling", 
            "text": "Popups and phantoms are styled with CSS that is fed through the Jinja2 template engine. A default CSS is provided that styles commonly used elements. Plugins can provide CSS to add additional styling for plugin specific purposes. See  CSS Styling  to learn more about the template engine and general styling info.  It is advised to use the  wrapper_class  option of the  show_popup ,  update_popup , and  add_phantom  commands to wrap your plugin content in a div with a unique, plugin specific class.  This way plugins can inject CSS to style their specific elements via  . mdpopups   . myplugin-wrapper   . myclass   {}  or simply  . myplugin-wrapper   . myclass   {} .  Also check out the included Python Markdown  attr_list  extension syntax . This is a good extension for applying classes directly to elements within Markdown format. Sometimes it can be difficult to target certain kinds of block elements, so if all else fails, you can insert raw HTML for specific elements into your Markdown and apply classes directly to them.", 
            "title": "Styling"
        }, 
        {
            "location": "/api/#api-usage", 
            "text": "MdPopups provides a number of accessible functions.", 
            "title": "API Usage"
        }, 
        {
            "location": "/api/#version", 
            "text": "(int,) mdpopups.version  Returns the version of the MdPopups library.  Returns a tuple of integers which represents the major, minor, and patch version.", 
            "title": "Version"
        }, 
        {
            "location": "/api/#show-popup", 
            "text": "mdpopups.show_popup   Accepts Markdown and creates a Sublime popup.  By default, the built-in Sublime syntax highlighter will be used for code highlighting.     Parameter  Type  Default  Description      view  sublime . View   A Sublime Text view object.    content  str   Markdown/HTML content for the popup.    md  bool  True  Defines whether the content is Markdown and needs to be converted.    css  str  None  Additional CSS that will be injected.    flags  int  0  Flags to pass down to the Sublime Text  view.show_popup  call.    location  int  - 1  Location to show popup in view.  -1 means to show right under the first cursor.    max_width  int  320  Maximum width of the popup.    max_height  int  240  Maximum height of the popup.    on_navigate  def   fn ()  None  Callback that receives one variable  href .    on_hide  def   fn ()  None  Callback for when the popup is hidden.    wrapper_class  str  None  A string containing the class name you wish wrap your content in.  A  div  will be created with the given class.    template_vars  dict  None  A dictionary containing template vars.  These can be used in either the CSS or the HTML/Markdown content. These vars are found under the object  plugin .    template_env_options  dict  None  A dictionary containing options for the Jinja2 template environment. This  only  applies to the  HTML/Markdown  content.    nl2br  bool  True  Determines whether the newline to  br  Python Markdown extension is enabled or not. Will be ignored if  markdown_extensions  is configured in YAML frontmatter.    allow_code_wrap  bool  False  Do not convert all the spaces in code blocks to  nbsp;  so that wrapping can occur. YAML frontmatter's  allow_code_wrap  will always be used instead of this if specified.      Deprecation  In 2.1.0  nl2br  and  alow_code_wrap  are deprecated. The legacy parameters here will be dropped by 2018 for  ST3  and these settings will not carry over to  ST4 .  To disable  nl2br , you can customize which extensions get loaded; see  Configure Markdown Extensions .  To enable code wrapping, see  Enable Code Wrapping .", 
            "title": "Show Popup"
        }, 
        {
            "location": "/api/#update-popup", 
            "text": "mdpopups.update_popup   Updates the current existing popup.     Parameter  Type  Default  Description      view  sublime . View   A Sublime Text view object.    content  str   Markdown/HTML content for the popup.    md  bool  True  Defines whether the content is Markdown and needs to be converted.    css  str  None  Additional CSS that will be injected.    wrapper_class  str  None  A string containing the class name you wish wrap your content in.  A  div  will be created with the given class.    template_vars  dict  None  A dictionary containing template vars.  These can be used in either the CSS or the HTML/Markdown content. These vars are found under the object  plugin .    template_env_options  dict  None  A dictionary containing options for the Jinja2 template environment. This  only  applies to the  HTML/Markdown  content.    nl2br  bool  True  Determines whether the newline to  br  Python Markdown extension is enabled or not. Will be ignored if  markdown_extensions  is configured in YAML frontmatter.    allow_code_wrap  bool  False  Do not convert all the spaces in code blocks to  nbsp;  so that wrapping can occur. YAML frontmatter's  allow_code_wrap  will always be used instead of this if specified.      Deprecation  In 2.1.0  nl2br  and  alow_code_wrap  are deprecated. The legacy parameters here will be dropped by 2018 for  ST3  and these settings will not carry over to  ST4 .  To disable  nl2br , you can customize which extensions get loaded; see  Configure Markdown Extensions .  To enable code wrapping, see  Enable Code Wrapping .", 
            "title": "Update Popup"
        }, 
        {
            "location": "/api/#hide-popup", 
            "text": "mdpopups.hide_popup   Hides the current popup.  Included for convenience and consistency.     Parameter  Type  Default  Description      view  sublime . View   A Sublime Text view object.", 
            "title": "Hide Popup"
        }, 
        {
            "location": "/api/#is-popup-visible", 
            "text": "bool mdpopups.is_popup_visible   Checks if popup is visible in the view. Included for convenience and consistency.     Parameter  Type  Default  Description      view  sublime . View   A Sublime Text view object.", 
            "title": "Is Popup Visible"
        }, 
        {
            "location": "/api/#add-phantom", 
            "text": "int mdpopups.add_phantom   Adds a phantom to the view and returns the phantom id as an integer. By default, the built-in Sublime syntax highlighter will be used for code highlighting.      Parameter  Type  Default  Description      view  sublime . View   A Sublime Text view object.    key  str   A key that is associated with the given phantom.  Multiple phantoms can share the same key, but each phantom will have its own id.    region  sublime . Region   Region in the view where the phantom should be inserted.    content  str   Markdown/HTML content for the phantom.    layout  int   How the HTML content should be inserted.  Acceptable values are:  sublime.LAYOUT_INLINE ,  sublime.LAYOUT_BLOCK , and  sublime.LAYOUT_BELOW .    md  bool  True  Defines whether the content is Markdown and needs to be converted.    css  str  None  Additional CSS that will be injected.    on_navigate  def   fn ()  None  Callback that receives one variable  href .    wrapper_class  str  None  A string containing the class name you wish wrap your content in.  A  div  will be created with the given class.    template_vars  dict  None  A dictionary containing template vars.  These can be used in either the CSS or the HTML/Markdown content.A dictionary containing template vars.  These can be used in either the CSS or the HTML/Markdown content. These vars are found under the object  plugin .    template_env_options  dict  None  A dictionary containing options for the Jinja2 template environment. This  only  applies to the  HTML/Markdown  content. Content plugin vars are found under the object:  plugin .A dictionary containing options for the Jinja2 template environment. This  only  applies to the  HTML/Markdown  content.    nl2br  bool  True  Determines whether the newline to  br  Python Markdown extension is enabled or not. Will be ignored if  markdown_extensions  is configured in YAML frontmatter.    allow_code_wrap  bool  False  Do not convert all the spaces in code blocks to  nbsp;  so that wrapping can occur. YAML frontmatter's  allow_code_wrap  will always be used instead of this if specified.      Deprecation  In 2.1.0  nl2br  and  alow_code_wrap  are deprecated. The legacy parameters here will be dropped by 2018 for  ST3  and these settings will not carry over to  ST4 .  To disable  nl2br , you can customize which extensions get loaded; see  Configure Markdown Extensions .  To enable code wrapping, see  Enable Code Wrapping .", 
            "title": "Add Phantom"
        }, 
        {
            "location": "/api/#erase-phantoms", 
            "text": "mdpopups.erase_phantoms   Erase all phantoms associated with the given key. Included for convenience and consistency.     Parameter  Type  Default  Description      view  sublime . View   A Sublime Text view object.    key  str   A key that is associated with phantoms.  Multiple phantoms can share the same key, but each phantom will have its own id.", 
            "title": "Erase Phantoms"
        }, 
        {
            "location": "/api/#erase-phantom-by-id", 
            "text": "mdpopups.erase_phantom_by_id   Erase a single phantom by its id.  Included for convenience and consistency.     Parameter  Type  Default  Description      view  sublime . View   A Sublime Text view object.    pid  str   The id associated with a single phantom.  Multiple phantoms can share the same key, but each phantom will have its own id.", 
            "title": "Erase Phantom by ID"
        }, 
        {
            "location": "/api/#query-phantom", 
            "text": "[sublime.Region] mdpopups.query_phantom   Query the location of a phantom by specifying its id.  A list of  sublime.Region s will be returned.  If the phantom with the given id is not found, the region will be returned with positions of  (-1, -1) .  Included for convenience and consistency.     Parameter  Type  Default  Description      view  sublime . View   A Sublime Text view object.    pid  int   The id associated with a single phantom.  Multiple phantoms can share the same key, but each phantom will have its own id.", 
            "title": "Query Phantom"
        }, 
        {
            "location": "/api/#query-phantoms", 
            "text": "[sublime.Region] mdpopups.query_phantoms   Query the location of multiple phantoms by specifying their ids.  A list of  sublime.Region s will be returned where each index corresponds to the index of ids that was passed in.  If a given phantom id is not found, that region will be returned with positions of  (-1, -1) .  Included for convenience and consistency.     Parameter  Type  Default  Description      view  sublime . View   A Sublime Text view object.    pids  [ int ]   A list of ids associated with phantoms.  Multiple phantoms can share the same key, but each phantom will have its own id.", 
            "title": "Query Phantoms"
        }, 
        {
            "location": "/api/#phantom-class", 
            "text": "mdpopups.Phantoms   A phantom object for use with  PhantomSet .     Parameter  Type  Default  Description      region  sublime . Region   Region in the view where the phantom should be inserted.    content  str   Markdown/HTML content for the phantom.    layout  int   How the HTML content should be inserted.  Acceptable values are:  sublime.LAYOUT_INLINE ,  sublime.LAYOUT_BLOCK , and  sublime.LAYOUT_BELOW .    md  bool  True  Defines whether the content is Markdown and needs to be converted.    css  str  None  Additional CSS that will be injected.    on_navigate  def   fn ()  None  Callback that receives one variable  href .    wrapper_class  str  None  A string containing the class name you wish wrap your content in.  A  div  will be created with the given class.    template_vars  dict  None  A dictionary containing template vars.  These can be used in either the CSS or the HTML/Markdown content.A dictionary containing template vars.  These can be used in either the CSS or the HTML/Markdown content. These vars are found under the object  plugin .    template_env_options  dict  None  A dictionary containing options for the Jinja2 template environment. This  only  applies to the  HTML/Markdown  content. Content plugin vars are found under the object:  plugin .A dictionary containing options for the Jinja2 template environment. This  only  applies to the  HTML/Markdown  content.    nl2br  bool  True  Determines whether the newline to  br  Python Markdown extension is enabled or not. Will be ignored if  markdown_extensions  is configured in YAML frontmatter.    allow_code_wrap  bool  False  Do not convert all the spaces in code blocks to  nbsp;  so that wrapping can occur. YAML frontmatter's  allow_code_wrap  will always be used instead of this if specified.     Attributes     Attribute  Type  Description      region  sublime . Region  Region in the view where the phantom should be inserted.    content  str  Markdown/HTML content for the phantom.    layout  int  How the HTML content should be inserted.  Acceptable values are:  sublime.LAYOUT_INLINE ,  sublime.LAYOUT_BLOCK , and  sublime.LAYOUT_BELOW .    md  bool  Defines whether the content is Markdown and needs to be converted.    css  str  Additional CSS that will be injected.    on_navigate  def   fn ()  Callback that receives one variable  href .    wrapper_class  str  A string containing the class name you wish wrap your content in.  A  div  will be created with the given class.    template_vars  dict  A dictionary containing template vars.  These can be used in either the CSS or the HTML/Markdown content.A dictionary containing template vars.  These can be used in either the CSS or the HTML/Markdown content. These vars are found under the object  plugin .    template_env_options  dict  A dictionary containing options for the Jinja2 template environment. This  only  applies to the  HTML/Markdown  content. Content plugin vars are found under the object:  plugin .A dictionary containing options for the Jinja2 template environment. This  only  applies to the  HTML/Markdown  content.    nl2br  bool  True    allow_code_wrap  bool  False      Deprecation  In 2.1.0  nl2br  and  alow_code_wrap  are deprecated. The legacy parameters here will be dropped by 2018 for  ST3  and these settings will not carry over to  ST4 .  To disable  nl2br , you can customize which extensions get loaded; see  Configure Markdown Extensions .  To enable code wrapping, see  Enable Code Wrapping .", 
            "title": "Phantom Class"
        }, 
        {
            "location": "/api/#phantom-set-class", 
            "text": "mdpopups.PhantomSet   A class that allows you to update phantoms under the specified key.     Parameter  Type  Default  Description      view  sublime . View   A Sublime Text view object.    key  str   The key that should be associated with all related phantoms in the set.     Methods   mdpopups.PhantomSet.update   Update all the phantoms in the set with the given phantom list.     Parameter  Type  Default  Description      new_phantoms  [ mdpopups . Phantom ]   A list of MdPopups phantoms.  sublime.Phantom  will be converted to  mdpopups.Phantom .", 
            "title": "Phantom Set Class"
        }, 
        {
            "location": "/api/#clear-cache", 
            "text": "mdpopups.clear_cache  Clears the CSS theme related caches.", 
            "title": "Clear Cache"
        }, 
        {
            "location": "/api/#markdown-to-html", 
            "text": "mdpopups.md2html   Exposes the Markdown to HTML converter in case it is desired to parse only a section of markdown.  This works well for someone who wants to work directly in HTML, but might want to still have fragments of markdown that they would like to occasionally convert. By default, the built-in Sublime syntax highlighter will be used for code highlighting.     Parameter  Type  Required  Default  Description      view  sublime . View  Yes   Sublime text View object.    markup  string  Yes   The markup code to be converted.    template_vars  dict  No  None  A dictionary containing template vars.  These can be used in either the CSS or the HTML/Markdown content.A dictionary containing template vars.  These can be used in either the CSS or the HTML/Markdown content. These vars are found under the object  plugin .    template_env_options  dict  No  None  A dictionary containing options for the Jinja2 template environment. This  only  applies to the  HTML/Markdown  content. Content plugin vars are found under the object:  plugin .A dictionary containing options for the Jinja2 template environment. This  only  applies to the  HTML/Markdown  content.    nl2br  bool  True  Determines whether the newline to  br  Python Markdown extension is enabled or not. Will be ignored if  markdown_extensions  is configured in YAML frontmatter.     allow_code_wrap  bool  False  Do not convert all the spaces in code blocks to  nbsp;  so that wrapping can occur. YAML frontmatter's  allow_code_wrap  will always be used instead of this if specified.       Deprecation  In 2.1.0  nl2br  and  alow_code_wrap  are deprecated. The legacy parameters here will be dropped by 2018 for  ST3  and these settings will not carry over to  ST4 .  To disable  nl2br , you can customize which extensions get loaded; see  Configure Markdown Extensions .  To enable code wrapping, see  Enable Code Wrapping .", 
            "title": "Markdown to HTML"
        }, 
        {
            "location": "/api/#color-box", 
            "text": "string mdpopups.color_box   Generates a color preview box image encoded in base 64 and formatted to be inserted right in your your Markdown or HTML code as an  img  tag.     Parameter  Type  Default  Description      colors  [ str ]   A list of color strings formatted as  #RRGGBBAA  where  R  is the red channel,  G  is the green channel,  B  is the blue channel, and  A  is the alpha channel.    border  str   The color for the color box border.  Input is a RGB color formatted as  #RRGGBB .    border2  str  None  The optional secondary border color.  This is great if you are going to have it on a light and dark backgrounds.  You can use a double border so the color stands out regardless of the background.  Input is a RGB color formatted as  #RRGGBB .    height  int  32  Height of color box.    width  int  32  Width of color box.    border_size  int  1  Width of the color box border.  If using  border2 , the value should be set to at least 2 to see both colors.    check_size  int  4  Size of checkered box squares used for the background of transparent colors.    max_colors  int  5  Max number of colors that will be evaluated in the  colors  parameter.  Multiple colors are used to to create palette boxes showing multiple colors lined up horizontally.    alpha  bool  False  Will create color box images with a real alpha channel instead of simulating one with a checkered background.    border_map  int  0xF  A mapping of which borders to show.  Where  0x1  is  TOP ,  0x2  is  LEFT ,  0x4  is  BOTTOM ,  0x8  is  RIGHT .  Map flags can be accessed via  mdpopups.colorbox.TOP  etc.", 
            "title": "Color Box"
        }, 
        {
            "location": "/api/#color-box-raw", 
            "text": "bytes mdpopups.color_box   Generates a color preview box image and returns the raw byte string of the image.     Parameter  Type  Default  Description      colors  [ str ]   A list of color strings formatted as  #RRGGBBAA  where  R  is the red channel,  G  is the green channel,  B  is the blue channel, and  A  is the alpha channel.    border  str   The color for the color box border.  Input is a RGB color formatted as  #RRGGBB .    border2  str  None  The optional secondary border color.  This is great if you are going to have it on a light and dark backgrounds.  You can use a double border so the color stands out regardless of the background.  Input is a RGB color formatted as  #RRGGBB .    height  int  32  Height of color box.    width  int  32  Width of color box.    border_size  int  1  Width of the color box border.  If using  border2 , the value should be set to at least 2 to see both colors.    check_size  int  4  Size of checkered box squares used for the background of transparent colors.    max_colors  int  5  Max number of colors that will be evaluated in the  colors  parameter.  Multiple colors are used to to create palette boxes showing multiple colors lined up horizontally.    alpha  bool  False  Will create color box images with a real alpha channel instead of simulating one with a checkered background.    border_map  int  0xF  A mapping of which borders to show.  Where  0x1  is  TOP ,  0x2  is  LEFT ,  0x4  is  BOTTOM ,  0x8  is  RIGHT .  Map flags can be accessed via  mdpopups.colorbox.TOP  etc.", 
            "title": "Color Box Raw"
        }, 
        {
            "location": "/api/#tint", 
            "text": "string mdpopups.tint   Takes a either a path to an PNG or a byte string of a PNG and tints it with a specific color and returns a string containing the base 64 encoded PNG in a HTML element.     Parameter  Type  Default  Description      img  str / bytes   Either a string in the form  Packages/Package/resource.png  or a byte string of a PNG image.    color  str   A string in the form of  #RRGGBB  or  #RRGGBBAA  (alpha layer will be stripped and ignored and is only allowed to make it easy to pass in colors from a color scheme).    opacity  int  255  An integer value between 0 - 255 that specifies the opacity of the tint.    height  int  None  Height that should be specified in the return HTML element.    width  int  None  Width that should be specified in the return HTML element.", 
            "title": "Tint"
        }, 
        {
            "location": "/api/#tint-raw", 
            "text": "bytes mdpopups.tint_raw   Takes a either a path to an PNG or a byte string of a PNG and tints it with a specific color and returns a byte string of the modified PNG.     Parameter  Type  Default  Description      img  str / bytes   Either a string in the form  Packages/Package/resource.png  or a byte string of a PNG image.    color  str   A string in the form of  #RRGGBB  or  #RRGGBBAA  (alpha layer will be stripped and ignored and is only allowed to make it easy to pass in colors from a color scheme).    opacity  int  255  An integer value between 0 - 255 that specifies the opacity of the tint.", 
            "title": "Tint Raw"
        }, 
        {
            "location": "/api/#scope-to-style", 
            "text": "dict mdpopups.scope2style   Takes a sublime scope (complexity doesn't matter), and guesses the style that would be applied.  While there may be untested corner cases with complex scopes where it fails, in general, it is usually accurate.  The returned dictionary is in the form:  { \n     # Colors will be None if not found, \n     # though usually, even if the scope has no color \n     # it will return the overall theme foreground. \n     # \n     # Background might be None if using `explicit_background` \n     # as it only returns a background if that style specifically \n     # defines a background. \n     color :   #RRGGBB , \n     background :   #RRGGBB , \n     # Style will usually be either  bold ,  italic . \n     # Multiple styles may be returned  bold italic  or an empty string  . \n     style :   bold italic  }      Parameter  Type  Default  Description      view  sublime . View   Sublime text View object so that the correct color scheme will be searched.    scope  string   The scope to search for.    selected  bool  False  Whether this scope is in a selected state (selected text).    explicit_background  bool  False  Only return a background if one is explicitly defined in the color scheme.", 
            "title": "Scope to Style"
        }, 
        {
            "location": "/api/#syntax-highlight", 
            "text": "mdpopups.syntax_highlight   Allows for syntax highlighting outside the Markdown environment.  You can just feed it code directly and give it the language of your choice, and you will be returned a block of HTML that has been syntax highlighted. By default, the built-in Sublime syntax highlighter will be used for code highlighting.     Parameter  Type  Default  Description      view  sublime . View   Sublime text View object.    src  str   The source code to be converted.  No fence tokes are needed ( ``` ).    language  str  None  Specifies the language to highlight as.    inline  bool  False  Will return the code formatted for inline display.    allow_code_wrap  bool  False  Do not convert all the spaces in code blocks to  nbsp;  so that wrapping can occur.", 
            "title": "Syntax Highlight"
        }, 
        {
            "location": "/api/#get-language-from-view", 
            "text": "mdpopups.get_language_from_view   Allows a user to extract the equivalent language specifier for  mdpopups.syntax_highlight  from a view.  If the language cannot be determined,  None  will be returned.     Parameter  Type  Default  Description      view  sublime . View   Sublime text View object.", 
            "title": "Get Language From View"
        }, 
        {
            "location": "/styling/", 
            "text": "CSS Styling\n\ue157\n\n\nSyntax Highlighting\n\ue157\n\n\nMdPopups has two syntax highlighting methods: the native Sublime syntax highlighter (default) and Pygments.  When developing a plugin, it is wise to test out both. The native Sublime Syntax Highlighter has most default languages mapped along with a few others.\n\n\nSublime Syntax Highlighter\n\ue157\n\n\nAs previously mentioned, MdPopups uses the internal syntax highlighter to highlight your code.  The benefit here is that you get code highlighting in your popup that matches your current theme.  The highlighting ability is dependent upon what syntax packages you have installed in Sublime.  It also depends on whether that syntax is enabled and mapped to a language keyword.  Pull requests are welcome to expand and keep the \nlanguage mapping\n updated.  You can also define in your \nPreferences.sublime-settings\n file additional mappings.  See \nmdpopups.sublime_user_lang_map\n for more info.\n\n\nMost users prefer using syntax highlighting that matches their current color scheme. If you are a developer, it is recommended to issue a pull request to add missing languages you need to the mapping. Optionally you can also describe how users can map what they need locally.\n\n\nPygments\n\ue157\n\n\nIn order to use Pygments, you have to disable \nmdpopups.use_sublime_highlighter\n. Pygments has a great variety of highlighters out of the box.  It also comes with a number of built-in color schemes that can be used. When enabling Pygments, you must specify the color scheme to use in your user CSS using the \nCSS template filter\n.\n\n\n/* Syntax Highlighting */\n\n\n{%\n- \nif\n \nvar.use_pygments\n \n%}\n\n  \n{%\n- \nif\n \nvar.is_light\n \n%}\n\n\n{{\ndefault\n|\npygments\n}}\n\n  \n{%\n- \nelse\n \n%}\n\n\n{{\nnative\n|\npygments\n}}\n\n  \n{%\n- \nendif\n \n%}\n\n\n{%\n- \nendif\n \n%}\n\n\n\n\n\nYou can also paste your own custom Pygments CSS directly into your User CSS, but you will have to format it to work properly.\n\n\nPygments defines special classes for each span that needs to be highlighted in a coding block. Pygments CSS classes are not only given syntax classes that are applied to each span, but usually an overall class is assigned to a \ndiv\n wrapper as well.  For instance, a class for whitespace may look like this (where \n.\nhighlight\n is the div wrapper's class and \n.\nw\n i the span's class):\n\n\n.\nhighlight\n \n.\nw\n \n{\n \ncolor\n:\n \n#cccccc\n \n}\n \n/* Text.Whitespace */\n\n\n\n\n\nIf doing your own, the Pygments CSS should define a rule to highlight general background and foregrounds.\n\n\n.\nmdpopups\n \n.\nhighlight\n \n{\n \nbackground-color\n:\n \n#f8f8f8\n;\n \ncolor\n:\n \n#4d4d4c\n \n}\n\n\n\n\n\nFull Pygments CSS Example\n.\nmdpopups\n \n.\nhighlight\n \n{\n \nbackground-color\n:\n \n#f8f8f8\n;\n \ncolor\n:\n \n#4d4d4c\n \n}\n\n\n.\nmdpopups\n \n.\nhighlight\n \n.\nc\n \n{\n \ncolor\n:\n \n#8e908c\n;\n \nfont-style\n:\n \nitalic\n \n}\n \n/* Comment */\n\n\n.\nmdpopups\n \n.\nhighlight\n \n.\nerr\n \n{\n \ncolor\n:\n \n#c82829\n \n}\n \n/* Error */\n\n\n.\nmdpopups\n \n.\nhighlight\n \n.\nk\n \n{\n \ncolor\n:\n \n#8959a8\n;\n \nfont-weight\n:\n \nbold\n \n}\n \n/* Keyword */\n\n\n.\nmdpopups\n \n.\nhighlight\n \n.\nl\n \n{\n \ncolor\n:\n \n#f5871f\n \n}\n \n/* Literal */\n\n\n.\nmdpopups\n \n.\nhighlight\n \n.\nn\n \n{\n \ncolor\n:\n \n#4d4d4c\n \n}\n \n/* Name */\n\n\n.\nmdpopups\n \n.\nhighlight\n \n.\no\n \n{\n \ncolor\n:\n \n#3e999f\n \n}\n \n/* Operator */\n\n\n.\nmdpopups\n \n.\nhighlight\n \n.\np\n \n{\n \ncolor\n:\n \n#4d4d4c\n \n}\n \n/* Punctuation */\n\n\n.\nmdpopups\n \n.\nhighlight\n \n.\ncm\n \n{\n \ncolor\n:\n \n#8e908c\n;\n \nfont-style\n:\n \nitalic\n \n}\n \n/* Comment.Multiline */\n\n\n.\nmdpopups\n \n.\nhighlight\n \n.\ncp\n \n{\n \ncolor\n:\n \n#8e908c\n;\n \nfont-weight\n:\n \nbold\n \n}\n \n/* Comment.Preproc */\n\n\n.\nmdpopups\n \n.\nhighlight\n \n.\nc1\n \n{\n \ncolor\n:\n \n#8e908c\n;\n \nfont-style\n:\n \nitalic\n \n}\n \n/* Comment.Single */\n\n\n.\nmdpopups\n \n.\nhighlight\n \n.\ncs\n \n{\n \ncolor\n:\n \n#8e908c\n;\n \nfont-style\n:\n \nitalic\n \n}\n \n/* Comment.Special */\n\n\n.\nmdpopups\n \n.\nhighlight\n \n.\ngd\n \n{\n \ncolor\n:\n \n#c82829\n \n}\n \n/* Generic.Deleted */\n\n\n.\nmdpopups\n \n.\nhighlight\n \n.\nge\n \n{\n \nfont-style\n:\n \nitalic\n \n}\n \n/* Generic.Emph */\n\n\n.\nmdpopups\n \n.\nhighlight\n \n.\ngh\n \n{\n \ncolor\n:\n \n#4d4d4c\n;\n \nfont-weight\n:\n \nbold\n \n}\n \n/* Generic.Heading */\n\n\n.\nmdpopups\n \n.\nhighlight\n \n.\ngi\n \n{\n \ncolor\n:\n \n#718c00\n \n}\n \n/* Generic.Inserted */\n\n\n.\nmdpopups\n \n.\nhighlight\n \n.\ngp\n \n{\n \ncolor\n:\n \n#8e908c\n;\n \nfont-weight\n:\n \nbold\n \n}\n \n/* Generic.Prompt */\n\n\n.\nmdpopups\n \n.\nhighlight\n \n.\ngs\n \n{\n \nfont-weight\n:\n \nbold\n \n}\n \n/* Generic.Strong */\n\n\n.\nmdpopups\n \n.\nhighlight\n \n.\ngu\n \n{\n \ncolor\n:\n \n#3e999f\n;\n \nfont-weight\n:\n \nbold\n \n}\n \n/* Generic.Subheading */\n\n\n.\nmdpopups\n \n.\nhighlight\n \n.\nkc\n \n{\n \ncolor\n:\n \n#8959a8\n;\n \nfont-weight\n:\n \nbold\n \n}\n \n/* Keyword.Constant */\n\n\n.\nmdpopups\n \n.\nhighlight\n \n.\nkd\n \n{\n \ncolor\n:\n \n#8959a8\n;\n \nfont-weight\n:\n \nbold\n \n}\n \n/* Keyword.Declaration */\n\n\n.\nmdpopups\n \n.\nhighlight\n \n.\nkn\n \n{\n \ncolor\n:\n \n#8959a8\n;\n \nfont-weight\n:\n \nbold\n \n}\n \n/* Keyword.Namespace */\n\n\n.\nmdpopups\n \n.\nhighlight\n \n.\nkp\n \n{\n \ncolor\n:\n \n#8959a8\n;\n \nfont-weight\n:\n \nbold\n \n}\n \n/* Keyword.Pseudo */\n\n\n.\nmdpopups\n \n.\nhighlight\n \n.\nkr\n \n{\n \ncolor\n:\n \n#8959a8\n;\n \nfont-weight\n:\n \nbold\n \n}\n \n/* Keyword.Reserved */\n\n\n.\nmdpopups\n \n.\nhighlight\n \n.\nkt\n \n{\n \ncolor\n:\n \n#eab700\n;\n \nfont-weight\n:\n \nbold\n \n}\n \n/* Keyword.Type */\n\n\n.\nmdpopups\n \n.\nhighlight\n \n.\nld\n \n{\n \ncolor\n:\n \n#718c00\n \n}\n \n/* Literal.Date */\n\n\n.\nmdpopups\n \n.\nhighlight\n \n.\nm\n \n{\n \ncolor\n:\n \n#f5871f\n \n}\n \n/* Literal.Number */\n\n\n.\nmdpopups\n \n.\nhighlight\n \n.\ns\n \n{\n \ncolor\n:\n \n#718c00\n \n}\n \n/* Literal.String */\n\n\n.\nmdpopups\n \n.\nhighlight\n \n.\nna\n \n{\n \ncolor\n:\n \n#4271ae\n \n}\n \n/* Name.Attribute */\n\n\n.\nmdpopups\n \n.\nhighlight\n \n.\nnb\n \n{\n \ncolor\n:\n \n#4271ae\n \n}\n \n/* Name.Builtin */\n\n\n.\nmdpopups\n \n.\nhighlight\n \n.\nnc\n \n{\n \ncolor\n:\n \n#c82829\n;\n \nfont-weight\n:\n \nbold\n \n}\n \n/* Name.Class */\n\n\n.\nmdpopups\n \n.\nhighlight\n \n.\nno\n \n{\n \ncolor\n:\n \n#c82829\n \n}\n \n/* Name.Constant */\n\n\n.\nmdpopups\n \n.\nhighlight\n \n.\nnd\n \n{\n \ncolor\n:\n \n#3e999f\n \n}\n \n/* Name.Decorator */\n\n\n.\nmdpopups\n \n.\nhighlight\n \n.\nni\n \n{\n \ncolor\n:\n \n#4d4d4c\n \n}\n \n/* Name.Entity */\n\n\n.\nmdpopups\n \n.\nhighlight\n \n.\nne\n \n{\n \ncolor\n:\n \n#c82829\n;\n \nfont-weight\n:\n \nbold\n \n}\n \n/* Name.Exception */\n\n\n.\nmdpopups\n \n.\nhighlight\n \n.\nnf\n \n{\n \ncolor\n:\n \n#4271ae\n;\n \nfont-weight\n:\n \nbold\n \n}\n \n/* Name.Function */\n\n\n.\nmdpopups\n \n.\nhighlight\n \n.\nnl\n \n{\n \ncolor\n:\n \n#4d4d4c\n \n}\n \n/* Name.Label */\n\n\n.\nmdpopups\n \n.\nhighlight\n \n.\nnn\n \n{\n \ncolor\n:\n \n#4d4d4c\n \n}\n \n/* Name.Namespace */\n\n\n.\nmdpopups\n \n.\nhighlight\n \n.\nnx\n \n{\n \ncolor\n:\n \n#4271ae\n \n}\n \n/* Name.Other */\n\n\n.\nmdpopups\n \n.\nhighlight\n \n.\npy\n \n{\n \ncolor\n:\n \n#4d4d4c\n \n}\n \n/* Name.Property */\n\n\n.\nmdpopups\n \n.\nhighlight\n \n.\nnt\n \n{\n \ncolor\n:\n \n#c82829\n \n}\n \n/* Name.Tag */\n\n\n.\nmdpopups\n \n.\nhighlight\n \n.\nnv\n \n{\n \ncolor\n:\n \n#c82829\n \n}\n \n/* Name.Variable */\n\n\n.\nmdpopups\n \n.\nhighlight\n \n.\now\n \n{\n \ncolor\n:\n \n#3e999f\n \n}\n \n/* Operator.Word */\n\n\n.\nmdpopups\n \n.\nhighlight\n \n.\nw\n \n{\n \ncolor\n:\n \n#4d4d4c\n \n}\n \n/* Text.Whitespace */\n\n\n.\nmdpopups\n \n.\nhighlight\n \n.\nmb\n \n{\n \ncolor\n:\n \n#f5871f\n \n}\n \n/* Literal.Number.Bin */\n\n\n.\nmdpopups\n \n.\nhighlight\n \n.\nmf\n \n{\n \ncolor\n:\n \n#f5871f\n \n}\n \n/* Literal.Number.Float */\n\n\n.\nmdpopups\n \n.\nhighlight\n \n.\nmh\n \n{\n \ncolor\n:\n \n#f5871f\n \n}\n \n/* Literal.Number.Hex */\n\n\n.\nmdpopups\n \n.\nhighlight\n \n.\nmi\n \n{\n \ncolor\n:\n \n#f5871f\n \n}\n \n/* Literal.Number.Integer */\n\n\n.\nmdpopups\n \n.\nhighlight\n \n.\nmo\n \n{\n \ncolor\n:\n \n#f5871f\n \n}\n \n/* Literal.Number.Oct */\n\n\n.\nmdpopups\n \n.\nhighlight\n \n.\nsb\n \n{\n \ncolor\n:\n \n#718c00\n \n}\n \n/* Literal.String.Backtick */\n\n\n.\nmdpopups\n \n.\nhighlight\n \n.\nsc\n \n{\n \ncolor\n:\n \n#4d4d4c\n \n}\n \n/* Literal.String.Char */\n\n\n.\nmdpopups\n \n.\nhighlight\n \n.\nsd\n \n{\n \ncolor\n:\n \n#8e908c\n \n}\n \n/* Literal.String.Doc */\n\n\n.\nmdpopups\n \n.\nhighlight\n \n.\ns2\n \n{\n \ncolor\n:\n \n#718c00\n \n}\n \n/* Literal.String.Double */\n\n\n.\nmdpopups\n \n.\nhighlight\n \n.\nse\n \n{\n \ncolor\n:\n \n#f5871f\n \n}\n \n/* Literal.String.Escape */\n\n\n.\nmdpopups\n \n.\nhighlight\n \n.\nsh\n \n{\n \ncolor\n:\n \n#718c00\n \n}\n \n/* Literal.String.Heredoc */\n\n\n.\nmdpopups\n \n.\nhighlight\n \n.\nsi\n \n{\n \ncolor\n:\n \n#f5871f\n \n}\n \n/* Literal.String.Interpol */\n\n\n.\nmdpopups\n \n.\nhighlight\n \n.\nsx\n \n{\n \ncolor\n:\n \n#718c00\n \n}\n \n/* Literal.String.Other */\n\n\n.\nmdpopups\n \n.\nhighlight\n \n.\nsr\n \n{\n \ncolor\n:\n \n#718c00\n \n}\n \n/* Literal.String.Regex */\n\n\n.\nmdpopups\n \n.\nhighlight\n \n.\ns1\n \n{\n \ncolor\n:\n \n#718c00\n \n}\n \n/* Literal.String.Single */\n\n\n.\nmdpopups\n \n.\nhighlight\n \n.\nss\n \n{\n \ncolor\n:\n \n#718c00\n \n}\n \n/* Literal.String.Symbol */\n\n\n.\nmdpopups\n \n.\nhighlight\n \n.\nbp\n \n{\n \ncolor\n:\n \n#f5871f\n \n}\n \n/* Name.Builtin.Pseudo */\n\n\n.\nmdpopups\n \n.\nhighlight\n \n.\nvc\n \n{\n \ncolor\n:\n \n#c82829\n \n}\n \n/* Name.Variable.Class */\n\n\n.\nmdpopups\n \n.\nhighlight\n \n.\nvg\n \n{\n \ncolor\n:\n \n#c82829\n \n}\n \n/* Name.Variable.Global */\n\n\n.\nmdpopups\n \n.\nhighlight\n \n.\nvi\n \n{\n \ncolor\n:\n \n#c82829\n \n}\n \n/* Name.Variable.Instance */\n\n\n.\nmdpopups\n \n.\nhighlight\n \n.\nil\n \n{\n \ncolor\n:\n \n#f5871f\n \n}\n \n/* Literal.Number.Integer.Long */\n\n\n\n\nCSS Styling\n\ue157\n\n\nOne reason MdPopups was created was to give consistent popups across plugins. Originally MdPopups forced its style so that plugins couldn't override the it. Later it was realized that plugins may have reasons to override certain things, and in recent versions, this constraint was relaxed. Despite changes since its inception, one thing has stayed the same: the user has the last say in how popups work. This is achieved by controlling which CSS gets loaded when.\n\n\nst=\noperation: Sublime CSS/Color Scheme CSS\nmd=\noperation: MdPopups Default CSS\npg=\noperation: Plugin CSS\nus=\noperation: User CSS\n\nst-\nmd-\npg-\nus\n\n\n\nSublime first provides its CSS which includes some basic styling and CSS from color schemes. MdPopups provides its own default CSS that styles the common HTML tags and provides minimal colors. Plugins come next and extend the CSS with plugin specific CSS. The user's CSS is loaded last and can override anything.\n\n\nAll CSS is passed through the Jinja2 template engine where special filters can provide things like appropriate CSS that matches your color scheme for a specific scope, load additional CSS from another source, have condition logic for specific Sublime and/or MdPopups versions, or even provide CSS for specific color schemes.\n\n\nTemplates are used so that a user can easily tap into all the colors, color filters, and other useful logic to control their popups and phantoms in one place without having to hard code a specific CSS for a specific color scheme.\n\n\nIn general, it is encouraged to use Sublime CSS variables such as \n--redish\n, \n--bluish\n, etc. to get appropriate colors for a given theme. Sublime calculates these colors from the color scheme directly. If it calculates a color that is not quite right, you can always request that the color scheme in question redefines that variable with an appropriate color.  Or you, as the user, can define one in your user CSS. You can read more about \nminihtml\n and it's features in the \nminihtml\n documentation\n.\n\n\nMdPopups also provides its own CSS variables that can be overridden by a user:\n\n\n\n\n\n\n\n\nVariable\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n--mdpopups-font-mono\n\n\nMonospace font stack for elements that require monospace (like code blocks).\n\n\n\n\n\n\n--mdpopups-hr\n\n\nhr\n tag color.\n\n\n\n\n\n\n--mdpopups-admon-fg\n\n\nGeneral admonition foreground/text color.\n\n\n\n\n\n\n--mdpopups-admon-info-fg\n\n\nInfo admonition foreground/text color.\n\n\n\n\n\n\n--mdpopups-admon-error-fg\n\n\nError admonition foreground/text color.\n\n\n\n\n\n\n--mdpopups-admon-success-fg\n\n\nSuccess admonition foreground/text color.\n\n\n\n\n\n\n--mdpopups-admon-warning-fg\n\n\nWarning admonition foreground/text color.\n\n\n\n\n\n\n--mdpopups-admon-title-fg\n\n\nGeneral admonition title foreground/text color.\n\n\n\n\n\n\n--mdpopups-admon-info-title-fg\n\n\nInfo admonition title foreground/text color.\n\n\n\n\n\n\n--mdpopups-admon-error-title-fg\n\n\nError admonition title foreground/text color.\n\n\n\n\n\n\n--mdpopups-admon-success-title-fg\n\n\nSuccess admonition title foreground/text color.\n\n\n\n\n\n\n--mdpopups-admon-warning-title-fg\n\n\nWarning admonition title foreground/text color.\n\n\n\n\n\n\n--mdpopups-admon-bg\n\n\nGeneral admonition background color.\n\n\n\n\n\n\n--mdpopups-admon-info-bg\n\n\nInfo admonition background color.\n\n\n\n\n\n\n--mdpopups-admon-error-bg\n\n\nError admonition background color.\n\n\n\n\n\n\n--mdpopups-admon-warning-bg\n\n\nWarning admonition background color.\n\n\n\n\n\n\n--mdpopups-admon-success-bg\n\n\nSuccess admonition background color.\n\n\n\n\n\n\n--mdpopups-admon-accent\n\n\nGeneral admonition accent color (border/title bar background).\n\n\n\n\n\n\n--mdpopups-admon-info-accent\n\n\nInfo admonition accent color (border/title bar background).\n\n\n\n\n\n\n--mdpopups-admon-error-accent\n\n\nError admonition accent color (border/title bar background).\n\n\n\n\n\n\n--mdpopups-admon-success-accent\n\n\nSuccess admonition accent color (border/title bar background).\n\n\n\n\n\n\n--mdpopups-admon-warning-accent\n\n\nWarning admonition accent color (border/title bar background).\n\n\n\n\n\n\n--mdpopups-kbd-fg\n\n\nkbd\n foreground/text color.\n\n\n\n\n\n\n--mdpopups-kbd-bg\n\n\nkbd\n background color.\n\n\n\n\n\n\n--mdpopups-kbd-border\n\n\nkbd\n border color.\n\n\n\n\n\n\n--mdpopups-hl-border\n\n\nInline and block code border color.\n\n\n\n\n\n\n--mdpopups-hl-bg\n\n\nInline and block code background color.\n\n\n\n\n\n\n\n\nCSS Templates\n\ue157\n\n\nAll variables and filters provided by default \nonly\n apply to the CSS, not the markdown or HTML content. The default provided variables are namespaced under \nvar\n.\n\n\nThe Markdown and HTML content only receives the variables that are given via \ntemplate_vars\n parameters and any options via the \ntemplate_env_options\n; user defined variables will get passed to the CSS, but not the options. User defined variables will be namespaced under \nplugin\n.\n\n\nCSS Filter\n\ue157\n\n\nWith the template environment, colors and style from the current Sublime color scheme can be accessed and manipulated.  Access to the Sublime color scheme styles CSS is done via the \ncss\n filter.\n\n\n\n\ncss\n\n\n\n\nRetrieves the style for a specific Sublime scope from a Sublime color scheme.  By specifying either \nforeground\n, \nbackground\n, or any scope (complexity doesn't really matter) and feeding it into the \ncss\n filter, all the related styling of the specified scope will be inserted as CSS into the CSS document.\n\n\nExample\n:\n\n\nThis:\n\n\nh1\n,\n \nh2\n,\n \nh3\n,\n \nh4\n,\n \nh5\n,\n \nh6\n \n{\n \n{{\ncomment\n|\ncss\n}}\n \n}\n\n\n\n\n\nMight become this:\n\n\nh1\n,\n \nh2\n,\n \nh3\n,\n \nh4\n,\n \nh5\n,\n \nh6\n \n{\n \ncolor\n:\n \n#888888\n;\n \nfont-style\n:\n \nitalic\n;\n \n}\n\n\n\n\n\nNotice that the format of insertion is \nkey: value;\n.  You do not need a semicolon after as the CSS lines are all formatted properly with semicolons.  If you add one, you may get multiple semicolons which \nmay\n break the CSS.\n\n\nIf you need to get at a specific CSS attribute, you can specify its name in the \ncss\n filter (available attributes are \ncolor\n, \nbackground-color\n, \nfont-style\n, and \nfont-weight\n).\n\n\nThis:\n\n\nh1\n,\n \nh2\n,\n \nh3\n,\n \nh4\n,\n \nh5\n,\n \nh6\n \n{\n \n{{\n.comment\n|\ncss\n(\ncolor\n)\n}}\n \n}\n\n\n\n\n\nWould then only include the color:\n\n\nh1\n,\n \nh2\n,\n \nh3\n,\n \nh4\n,\n \nh5\n,\n \nh6\n \n{\n \ncolor\n:\n \n#888888\n;\n \n}\n\n\n\n\n\nIn general, a foreground color is always returned, but by default, a background color is only returned if one is explicitly defined. To always get a background (which most likely will default to the overall scheme background), you can set the additional \nexplicit_background\n parameter to \nFalse\n.\n\n\n/* If `keyword.operator` is not explicitly used, fallback to `.keyword` */\n\n\nh1\n,\n \nh2\n,\n \nh3\n,\n \nh4\n,\n \nh5\n,\n \nh6\n \n{\n \n{{\nkeyword.operator\n|\ncss\n(\ncolor\n,\n \nFalse\n)\n}}\n \n}\n\n\n\n\n\n\n\n\n\nColor Filters\n\ue157\n\n\nMdPopups also provides a number of color filters within the template environment that can manipulate the CSS colors returned from the \ncss\n filter (or equivalent formatted CSS). These filters will strip out the color and modify it, and return the appropriate CSS.  To manipulate a color value directly, you can use Sublime's built in color blending.  In most cases, it is advised to use Sublime's color blending functionality, but these are available to aid those who wish to access and manipulate CSS of scopes directly.  See Sublime's \nminihtml\n documentation\n for more info.\n\n\nEven though Sublime generally provides contrast to popups, lets pretend you had a popup that was the same color as the view window and it was difficult to see where the popup starts and ends.  You can take the color schemes background and apply a brightness filter to it allowing you now see the popup clearly.\n\n\nHere we can make the background of the popup darker:\n\n\n.\nmdpopups\n \ndiv\n.\nmyplugin\n \n{\n \n{{\n.background\n|\ncss\n(\nbackground-color\n)|\nbrightness\n(\n0.9\n)\n}}\n \n}\n\n\n\n\n\nColor filters take a single color attribute of the form \nkey: value;\n.  So when feeding the color template filters your CSS via the \ncss\n filter, you should specify the color attribute (\nbackground-color\n or \ncolor\n) that you wish to apply the filter to; it may be difficult to tell how many attributes \ncss\n could return without explicitly specifying attribute.  Color filters only take either \ncolor\n or \nbackground-color\n attributes.\n\n\nFilters can be chained if more intensity is needed (as some filters may clamp the value in one call), or if you want to apply multiple filters.  These are all the available filters:\n\n\n\n\nforeground\n and \nbackground\n\n\n\n\nIf desired, you can convert a foreground color to a background color or vice versa.  To convert to a foreground color, you can use the \nforeground\n filter.  To convert to a background color, you can use the \nbackground\n filter. Remember, this is augmenting the CSS returned by the \ncss\n filter, you can't just give it a color. \n\n\nTo convert a background to a foreground.\n\n\nExample\n:\n\nbody\n \n{\n \n{{\n.background\n|\ncss\n(\nbackground-color\n)|\nforeground\n}}\n \n}\n\n\n\n\nTo convert a foreground to a background.\n\n\nExample\n:\n\nbody\n \n{\n \n{{\n.foreground\n|\ncss\n(\ncolor\n)|\nbackground\n}}\n \n}\n\n\n\n\n\n\nbrightness\n\n\n\n\nShifts brightness either dark or lighter. Brightness is relative to 1 where 1 means no change.  Accepted values are floats that are greater than 0.  Ranges are clamped between 0 and 2.\n\n\nExample - Darken\n:\n\nbody\n \n{\n \n{{\n.background\n|\ncss\n(\nbackground-color\n)|\nbrightness\n(\n0.9\n)\n}}\n \n}\n\n\n\n\nExample - Lighten\n:\n\nbody\n \n{\n \n{{\n.background\n|\ncss\n(\nbackground-color\n)|\nbrightness\n(\n1.1\n)\n}}\n \n}\n\n\n\n\n\n\nsaturation\n\n\n\n\nShifts the saturation either to right (saturate) or the left (desaturate).  Saturation is relative to 1 where 1 means no change.  Accepted values are floats that are greater than 0.  Ranges are clamped between 0 and 2.\n\n\nExample - Desaturate\n:\n\nbody\n \n{\n \n{{\n.background\n|\ncss\n(\nbackground-color\n)|\nsaturation\n(\n0.9\n)\n}}\n \n}\n\n\n\n\nExample - Saturate\n:\n\nbody\n \n{\n \n{{\n.background\n|\ncss\n(\nbackground-color\n)|\nsaturation\n(\n1.1\n)\n}}\n \n}\n\n\n\n\n\n\ngrayscale\n\n\n\n\nFilters all colors to a grayish tone.\n\n\nExample\n:\n\nbody\n \n{\n \n{{\n.background\n|\ncss\n(\nbackground-color\n)|\ngrayscale\n}}\n \n}\n\n\n\n\n\n\nsepia\n\n\n\n\nFilters all colors to a sepia tone.\n\n\nExample\n:\n\nbody\n \n{\n \n{{\n.background\n|\ncss\n(\nbackground-color\n)|\nsepia\n}}\n \n}\n\n\n\n\n\n\ninvert\n\n\n\n\nInverts a color.\n\n\nExample\n:\n\nbody\n \n{\n \n{{\n.background\n|\ncss\n(\nbackground-color\n)|\ninvert\n}}\n \n}\n\n\n\n\n\n\ncolorize\n\n\n\n\nFilters all colors to a shade of the specified hue.  Think grayscale, but instead of gray, you define a non-gray hue.  The values are angular dimensions starting at the red primary at 0\u00b0, passing through the green primary at 120\u00b0 and the blue primary at 240\u00b0, and then wrapping back to red at 360\u00b0.\n\n\nExample\n:\n\nbody\n \n{\n \n{{\n.background\n|\ncss\n(\nbackground-color\n)|\ncolorize\n(\n30\n)\n}}\n \n}\n\n\n\n\n\n\nhue\n\n\n\n\nShifts the current hue either to the left or right.  The values are angular dimensions starting at the red primary at 0\u00b0, passing through the green primary at 120\u00b0 and the blue primary at 240\u00b0, and then wrapping back to red at 360\u00b0.  Values can either be negative to shift left or positive to shift the hue to the right.\n\n\nExample - Left Shift\n:\n\nbody\n \n{\n \n{{\n.background\n|\ncss\n(\nbackground-color\n)|\nhue\n(-\n30\n)\n}}\n \n}\n\n\n\n\nExample - Left Right\n:\n\nbody\n \n{\n \n{{\n.background\n|\ncss\n(\nbackground-color\n)|\nhue\n(\n30\n)\n}}\n \n}\n\n\n\n\n\n\nfade\n\n\n\n\nFades a color. Essentially it is like apply transparency to the color allowing the color schemes base background color to show through.\n\n\nExample - Fade 50%\n:\n\nbody\n \n{\n \n{{\n.foreground\n|\ncss\n(\ncolor\n)|\nfade\n(\n0.5\n)\n}}\n \n}\n\n\n\n\n\n\n\n\nInclude CSS Filter\n\ue157\n\n\nThe template environment allows for retrieving CSS resources from Sublime Packages or built-in Pygments CSS from the Pygments library.\n\n\n\n\ngetcss\n\n\n\n\nRetrieve a CSS file from Sublime's \nPackages\n folder.  CSS retrieved in this manner can include template variables and filters.\n\n\nExample\n:\n\n{{\nPackages/User/aprosopo-dark.css\n|\ngetcss\n}}\n\n\n\n\n\n\npygments\n\n\n\n\nRetrieve a built-in Pygments color scheme.\n\n\nExample\n:\n\n{{\nnative\n|\npygments\n}}\n\n\n\n\n\n\n\n\nTemplate Variables\n\ue157\n\n\nThe template environment provides a couple of variables that can be used to conditionally alter the CSS output.  Variables are found under \nvar\n.\n\n\n\n\nvar.sublime_version\n\n\n\n\nsublime_version\n contains the current Sublime Text version.  This allows you conditionally handle CSS features that are specific to a Sublime Text version.\n\n\nExample\n\n\n{%\n \nif\n \nvar.sublime_version\n \n=\n \n3119\n \n%}\n\n\npadding\n:\n \n0\n.\n2rem\n;\n\n\n{%\n \nelse\n \n%}\n\n\npadding\n:\n \n0\n.\n2em\n;\n\n\n{%\n \nendif\n \n%}\n\n\n\n\n\n\nvar.mdpopups_version\n\n\n\n\nmdpopups_version\n contains the current MdPopups version which you can use in your CSS templates if needed.\n\n\nExample\n\n\n{%\n \nif\n \nvar.mdpopups_version\n \n=\n \n(\n1\n,\n \n9\n,\n \n0\n)\n \n%}\n\n\n/* do something */\n\n\n{%\n \nelse\n \n%}\n\n\n/* do something else */\n\n\n{%\n \nendif\n \n%}\n\n\n\n\n\n\nvar.default_style\n\n\nFlag specifying whether default styling is being used.  See \nmdpopups.default_style\n for how to control this flag.  And see \ndefault.css\n for an example of how it is used.\n\n\nvar.is_dark\n and \nvar.is_light\n\n\n\n\nis_dark\n checks if the color scheme is a dark color scheme.  Alternatively, \nis_light\n checks if the color scheme is a light color scheme.\n\n\nExample\n:\n\n{%\n \nif\n \nvar.is_light\n \n%}\n\n\nhtml\n{\n \n{{\n.background\n|\ncss\n(\nbackground-color\n)|\nbrightness\n(\n0.9\n)\n}}\n \n}\n\n\n{%\n \nelse\n \n%}\n\n\nhtml\n{\n \n{{\n.background\n|\ncss\n(\nbackground-color\n)|\nbrightness\n(\n1.1\n)\n}}\n \n}\n\n\n{%\n \nendif\n \n%}\n\n\n\n\n\n\nvar.is_popup\n and \nvar.is_phantom\n\n\n\n\nis_phantom\n checks if the current CSS is for a phantom instead of a popup.  Alternatively, \nis_popup\n checks if the current use of the CSS is for a popup.\n\n\nExample\n:\n\n{%\n \nif\n \nvar.is_phantom\n \n%}\n\n\nhtml\n{\n \n{{\n.background\n|\ncss\n(\nbackground-color\n)|\nbrightness\n(\n0.9\n)\n}}\n \n}\n\n\n{%\n \nelse\n \n%}\n\n\nhtml\n{\n \n{{\n.background\n|\ncss\n(\nbackground-color\n)|\nbrightness\n(\n1.1\n)\n}}\n \n}\n\n\n{%\n \nendif\n \n%}\n\n\n\n\n\n\nvar.use_pygments\n\n\n\n\nChecks if the Pygments syntax highlighter is being used.\n\n\nExample\n:\n\n{%\n \nif\n \nvar.use_pygments\n \n%}\n\n\n{%\n \nif\n \nvar.is_light\n \n%}\n\n\n{{\ndefault\n|\npygments\n}}\n\n\n{%\n \nelse\n \n%}\n\n\n{{\nnative\n|\npygments\n}}\n\n\n{%\n \nendif\n \n%}\n\n\n{%\n \nendif\n \n%}\n\n\n\n\n\n\nvar.color_scheme\n\n\n\n\nRetrieves the current color schemes name.\n\n\nExample\n:\n\n{%\n \nif\n \n(\n\n    \nvar.color_scheme\n \nin\n \n(\n\n        \nPackages/Theme - Aprosopo/Tomorrow-Night-Eighties-Stormy.tmTheme\n,\n\n        \nPackages/Theme - Aprosopo/Tomorrow-Morning.tmTheme\n,\n\n    \n)\n\n\n)\n \n%}\n\n\na\n \n{\n \n{{\n.keyword.operator\n|\ncss\n(\ncolor\n)\n}}\n \n}\n\n\n{%\n \nelse\n \n%}\n\n\na\n \n{\n \n{{\n.support.function\n|\ncss\n(\ncolor\n)\n}}\n \n}\n\n\n{%\n \nendif\n \n%}", 
            "title": "CSS Styling"
        }, 
        {
            "location": "/styling/#css-styling", 
            "text": "", 
            "title": "CSS Styling"
        }, 
        {
            "location": "/styling/#syntax-highlighting", 
            "text": "MdPopups has two syntax highlighting methods: the native Sublime syntax highlighter (default) and Pygments.  When developing a plugin, it is wise to test out both. The native Sublime Syntax Highlighter has most default languages mapped along with a few others.", 
            "title": "Syntax Highlighting"
        }, 
        {
            "location": "/styling/#sublime-syntax-highlighter", 
            "text": "As previously mentioned, MdPopups uses the internal syntax highlighter to highlight your code.  The benefit here is that you get code highlighting in your popup that matches your current theme.  The highlighting ability is dependent upon what syntax packages you have installed in Sublime.  It also depends on whether that syntax is enabled and mapped to a language keyword.  Pull requests are welcome to expand and keep the  language mapping  updated.  You can also define in your  Preferences.sublime-settings  file additional mappings.  See  mdpopups.sublime_user_lang_map  for more info.  Most users prefer using syntax highlighting that matches their current color scheme. If you are a developer, it is recommended to issue a pull request to add missing languages you need to the mapping. Optionally you can also describe how users can map what they need locally.", 
            "title": "Sublime Syntax Highlighter"
        }, 
        {
            "location": "/styling/#pygments", 
            "text": "In order to use Pygments, you have to disable  mdpopups.use_sublime_highlighter . Pygments has a great variety of highlighters out of the box.  It also comes with a number of built-in color schemes that can be used. When enabling Pygments, you must specify the color scheme to use in your user CSS using the  CSS template filter .  /* Syntax Highlighting */  {% -  if   var.use_pygments   %} \n   {% -  if   var.is_light   %}  {{ default | pygments }} \n   {% -  else   %}  {{ native | pygments }} \n   {% -  endif   %}  {% -  endif   %}   You can also paste your own custom Pygments CSS directly into your User CSS, but you will have to format it to work properly.  Pygments defines special classes for each span that needs to be highlighted in a coding block. Pygments CSS classes are not only given syntax classes that are applied to each span, but usually an overall class is assigned to a  div  wrapper as well.  For instance, a class for whitespace may look like this (where  . highlight  is the div wrapper's class and  . w  i the span's class):  . highlight   . w   {   color :   #cccccc   }   /* Text.Whitespace */   If doing your own, the Pygments CSS should define a rule to highlight general background and foregrounds.  . mdpopups   . highlight   {   background-color :   #f8f8f8 ;   color :   #4d4d4c   }   Full Pygments CSS Example . mdpopups   . highlight   {   background-color :   #f8f8f8 ;   color :   #4d4d4c   }  . mdpopups   . highlight   . c   {   color :   #8e908c ;   font-style :   italic   }   /* Comment */  . mdpopups   . highlight   . err   {   color :   #c82829   }   /* Error */  . mdpopups   . highlight   . k   {   color :   #8959a8 ;   font-weight :   bold   }   /* Keyword */  . mdpopups   . highlight   . l   {   color :   #f5871f   }   /* Literal */  . mdpopups   . highlight   . n   {   color :   #4d4d4c   }   /* Name */  . mdpopups   . highlight   . o   {   color :   #3e999f   }   /* Operator */  . mdpopups   . highlight   . p   {   color :   #4d4d4c   }   /* Punctuation */  . mdpopups   . highlight   . cm   {   color :   #8e908c ;   font-style :   italic   }   /* Comment.Multiline */  . mdpopups   . highlight   . cp   {   color :   #8e908c ;   font-weight :   bold   }   /* Comment.Preproc */  . mdpopups   . highlight   . c1   {   color :   #8e908c ;   font-style :   italic   }   /* Comment.Single */  . mdpopups   . highlight   . cs   {   color :   #8e908c ;   font-style :   italic   }   /* Comment.Special */  . mdpopups   . highlight   . gd   {   color :   #c82829   }   /* Generic.Deleted */  . mdpopups   . highlight   . ge   {   font-style :   italic   }   /* Generic.Emph */  . mdpopups   . highlight   . gh   {   color :   #4d4d4c ;   font-weight :   bold   }   /* Generic.Heading */  . mdpopups   . highlight   . gi   {   color :   #718c00   }   /* Generic.Inserted */  . mdpopups   . highlight   . gp   {   color :   #8e908c ;   font-weight :   bold   }   /* Generic.Prompt */  . mdpopups   . highlight   . gs   {   font-weight :   bold   }   /* Generic.Strong */  . mdpopups   . highlight   . gu   {   color :   #3e999f ;   font-weight :   bold   }   /* Generic.Subheading */  . mdpopups   . highlight   . kc   {   color :   #8959a8 ;   font-weight :   bold   }   /* Keyword.Constant */  . mdpopups   . highlight   . kd   {   color :   #8959a8 ;   font-weight :   bold   }   /* Keyword.Declaration */  . mdpopups   . highlight   . kn   {   color :   #8959a8 ;   font-weight :   bold   }   /* Keyword.Namespace */  . mdpopups   . highlight   . kp   {   color :   #8959a8 ;   font-weight :   bold   }   /* Keyword.Pseudo */  . mdpopups   . highlight   . kr   {   color :   #8959a8 ;   font-weight :   bold   }   /* Keyword.Reserved */  . mdpopups   . highlight   . kt   {   color :   #eab700 ;   font-weight :   bold   }   /* Keyword.Type */  . mdpopups   . highlight   . ld   {   color :   #718c00   }   /* Literal.Date */  . mdpopups   . highlight   . m   {   color :   #f5871f   }   /* Literal.Number */  . mdpopups   . highlight   . s   {   color :   #718c00   }   /* Literal.String */  . mdpopups   . highlight   . na   {   color :   #4271ae   }   /* Name.Attribute */  . mdpopups   . highlight   . nb   {   color :   #4271ae   }   /* Name.Builtin */  . mdpopups   . highlight   . nc   {   color :   #c82829 ;   font-weight :   bold   }   /* Name.Class */  . mdpopups   . highlight   . no   {   color :   #c82829   }   /* Name.Constant */  . mdpopups   . highlight   . nd   {   color :   #3e999f   }   /* Name.Decorator */  . mdpopups   . highlight   . ni   {   color :   #4d4d4c   }   /* Name.Entity */  . mdpopups   . highlight   . ne   {   color :   #c82829 ;   font-weight :   bold   }   /* Name.Exception */  . mdpopups   . highlight   . nf   {   color :   #4271ae ;   font-weight :   bold   }   /* Name.Function */  . mdpopups   . highlight   . nl   {   color :   #4d4d4c   }   /* Name.Label */  . mdpopups   . highlight   . nn   {   color :   #4d4d4c   }   /* Name.Namespace */  . mdpopups   . highlight   . nx   {   color :   #4271ae   }   /* Name.Other */  . mdpopups   . highlight   . py   {   color :   #4d4d4c   }   /* Name.Property */  . mdpopups   . highlight   . nt   {   color :   #c82829   }   /* Name.Tag */  . mdpopups   . highlight   . nv   {   color :   #c82829   }   /* Name.Variable */  . mdpopups   . highlight   . ow   {   color :   #3e999f   }   /* Operator.Word */  . mdpopups   . highlight   . w   {   color :   #4d4d4c   }   /* Text.Whitespace */  . mdpopups   . highlight   . mb   {   color :   #f5871f   }   /* Literal.Number.Bin */  . mdpopups   . highlight   . mf   {   color :   #f5871f   }   /* Literal.Number.Float */  . mdpopups   . highlight   . mh   {   color :   #f5871f   }   /* Literal.Number.Hex */  . mdpopups   . highlight   . mi   {   color :   #f5871f   }   /* Literal.Number.Integer */  . mdpopups   . highlight   . mo   {   color :   #f5871f   }   /* Literal.Number.Oct */  . mdpopups   . highlight   . sb   {   color :   #718c00   }   /* Literal.String.Backtick */  . mdpopups   . highlight   . sc   {   color :   #4d4d4c   }   /* Literal.String.Char */  . mdpopups   . highlight   . sd   {   color :   #8e908c   }   /* Literal.String.Doc */  . mdpopups   . highlight   . s2   {   color :   #718c00   }   /* Literal.String.Double */  . mdpopups   . highlight   . se   {   color :   #f5871f   }   /* Literal.String.Escape */  . mdpopups   . highlight   . sh   {   color :   #718c00   }   /* Literal.String.Heredoc */  . mdpopups   . highlight   . si   {   color :   #f5871f   }   /* Literal.String.Interpol */  . mdpopups   . highlight   . sx   {   color :   #718c00   }   /* Literal.String.Other */  . mdpopups   . highlight   . sr   {   color :   #718c00   }   /* Literal.String.Regex */  . mdpopups   . highlight   . s1   {   color :   #718c00   }   /* Literal.String.Single */  . mdpopups   . highlight   . ss   {   color :   #718c00   }   /* Literal.String.Symbol */  . mdpopups   . highlight   . bp   {   color :   #f5871f   }   /* Name.Builtin.Pseudo */  . mdpopups   . highlight   . vc   {   color :   #c82829   }   /* Name.Variable.Class */  . mdpopups   . highlight   . vg   {   color :   #c82829   }   /* Name.Variable.Global */  . mdpopups   . highlight   . vi   {   color :   #c82829   }   /* Name.Variable.Instance */  . mdpopups   . highlight   . il   {   color :   #f5871f   }   /* Literal.Number.Integer.Long */", 
            "title": "Pygments"
        }, 
        {
            "location": "/styling/#css-styling_1", 
            "text": "One reason MdPopups was created was to give consistent popups across plugins. Originally MdPopups forced its style so that plugins couldn't override the it. Later it was realized that plugins may have reasons to override certain things, and in recent versions, this constraint was relaxed. Despite changes since its inception, one thing has stayed the same: the user has the last say in how popups work. This is achieved by controlling which CSS gets loaded when.  st= operation: Sublime CSS/Color Scheme CSS\nmd= operation: MdPopups Default CSS\npg= operation: Plugin CSS\nus= operation: User CSS\n\nst- md- pg- us  Sublime first provides its CSS which includes some basic styling and CSS from color schemes. MdPopups provides its own default CSS that styles the common HTML tags and provides minimal colors. Plugins come next and extend the CSS with plugin specific CSS. The user's CSS is loaded last and can override anything.  All CSS is passed through the Jinja2 template engine where special filters can provide things like appropriate CSS that matches your color scheme for a specific scope, load additional CSS from another source, have condition logic for specific Sublime and/or MdPopups versions, or even provide CSS for specific color schemes.  Templates are used so that a user can easily tap into all the colors, color filters, and other useful logic to control their popups and phantoms in one place without having to hard code a specific CSS for a specific color scheme.  In general, it is encouraged to use Sublime CSS variables such as  --redish ,  --bluish , etc. to get appropriate colors for a given theme. Sublime calculates these colors from the color scheme directly. If it calculates a color that is not quite right, you can always request that the color scheme in question redefines that variable with an appropriate color.  Or you, as the user, can define one in your user CSS. You can read more about  minihtml  and it's features in the  minihtml  documentation .  MdPopups also provides its own CSS variables that can be overridden by a user:     Variable  Description      --mdpopups-font-mono  Monospace font stack for elements that require monospace (like code blocks).    --mdpopups-hr  hr  tag color.    --mdpopups-admon-fg  General admonition foreground/text color.    --mdpopups-admon-info-fg  Info admonition foreground/text color.    --mdpopups-admon-error-fg  Error admonition foreground/text color.    --mdpopups-admon-success-fg  Success admonition foreground/text color.    --mdpopups-admon-warning-fg  Warning admonition foreground/text color.    --mdpopups-admon-title-fg  General admonition title foreground/text color.    --mdpopups-admon-info-title-fg  Info admonition title foreground/text color.    --mdpopups-admon-error-title-fg  Error admonition title foreground/text color.    --mdpopups-admon-success-title-fg  Success admonition title foreground/text color.    --mdpopups-admon-warning-title-fg  Warning admonition title foreground/text color.    --mdpopups-admon-bg  General admonition background color.    --mdpopups-admon-info-bg  Info admonition background color.    --mdpopups-admon-error-bg  Error admonition background color.    --mdpopups-admon-warning-bg  Warning admonition background color.    --mdpopups-admon-success-bg  Success admonition background color.    --mdpopups-admon-accent  General admonition accent color (border/title bar background).    --mdpopups-admon-info-accent  Info admonition accent color (border/title bar background).    --mdpopups-admon-error-accent  Error admonition accent color (border/title bar background).    --mdpopups-admon-success-accent  Success admonition accent color (border/title bar background).    --mdpopups-admon-warning-accent  Warning admonition accent color (border/title bar background).    --mdpopups-kbd-fg  kbd  foreground/text color.    --mdpopups-kbd-bg  kbd  background color.    --mdpopups-kbd-border  kbd  border color.    --mdpopups-hl-border  Inline and block code border color.    --mdpopups-hl-bg  Inline and block code background color.", 
            "title": "CSS Styling"
        }, 
        {
            "location": "/styling/#css-templates", 
            "text": "All variables and filters provided by default  only  apply to the CSS, not the markdown or HTML content. The default provided variables are namespaced under  var .  The Markdown and HTML content only receives the variables that are given via  template_vars  parameters and any options via the  template_env_options ; user defined variables will get passed to the CSS, but not the options. User defined variables will be namespaced under  plugin .", 
            "title": "CSS Templates"
        }, 
        {
            "location": "/styling/#css-filter", 
            "text": "With the template environment, colors and style from the current Sublime color scheme can be accessed and manipulated.  Access to the Sublime color scheme styles CSS is done via the  css  filter.   css   Retrieves the style for a specific Sublime scope from a Sublime color scheme.  By specifying either  foreground ,  background , or any scope (complexity doesn't really matter) and feeding it into the  css  filter, all the related styling of the specified scope will be inserted as CSS into the CSS document.  Example :  This:  h1 ,   h2 ,   h3 ,   h4 ,   h5 ,   h6   {   {{ comment | css }}   }   Might become this:  h1 ,   h2 ,   h3 ,   h4 ,   h5 ,   h6   {   color :   #888888 ;   font-style :   italic ;   }   Notice that the format of insertion is  key: value; .  You do not need a semicolon after as the CSS lines are all formatted properly with semicolons.  If you add one, you may get multiple semicolons which  may  break the CSS.  If you need to get at a specific CSS attribute, you can specify its name in the  css  filter (available attributes are  color ,  background-color ,  font-style , and  font-weight ).  This:  h1 ,   h2 ,   h3 ,   h4 ,   h5 ,   h6   {   {{ .comment | css ( color ) }}   }   Would then only include the color:  h1 ,   h2 ,   h3 ,   h4 ,   h5 ,   h6   {   color :   #888888 ;   }   In general, a foreground color is always returned, but by default, a background color is only returned if one is explicitly defined. To always get a background (which most likely will default to the overall scheme background), you can set the additional  explicit_background  parameter to  False .  /* If `keyword.operator` is not explicitly used, fallback to `.keyword` */  h1 ,   h2 ,   h3 ,   h4 ,   h5 ,   h6   {   {{ keyword.operator | css ( color ,   False ) }}   }", 
            "title": "CSS Filter"
        }, 
        {
            "location": "/styling/#color-filters", 
            "text": "MdPopups also provides a number of color filters within the template environment that can manipulate the CSS colors returned from the  css  filter (or equivalent formatted CSS). These filters will strip out the color and modify it, and return the appropriate CSS.  To manipulate a color value directly, you can use Sublime's built in color blending.  In most cases, it is advised to use Sublime's color blending functionality, but these are available to aid those who wish to access and manipulate CSS of scopes directly.  See Sublime's  minihtml  documentation  for more info.  Even though Sublime generally provides contrast to popups, lets pretend you had a popup that was the same color as the view window and it was difficult to see where the popup starts and ends.  You can take the color schemes background and apply a brightness filter to it allowing you now see the popup clearly.  Here we can make the background of the popup darker:  . mdpopups   div . myplugin   {   {{ .background | css ( background-color )| brightness ( 0.9 ) }}   }   Color filters take a single color attribute of the form  key: value; .  So when feeding the color template filters your CSS via the  css  filter, you should specify the color attribute ( background-color  or  color ) that you wish to apply the filter to; it may be difficult to tell how many attributes  css  could return without explicitly specifying attribute.  Color filters only take either  color  or  background-color  attributes.  Filters can be chained if more intensity is needed (as some filters may clamp the value in one call), or if you want to apply multiple filters.  These are all the available filters:   foreground  and  background   If desired, you can convert a foreground color to a background color or vice versa.  To convert to a foreground color, you can use the  foreground  filter.  To convert to a background color, you can use the  background  filter. Remember, this is augmenting the CSS returned by the  css  filter, you can't just give it a color.   To convert a background to a foreground.  Example : body   {   {{ .background | css ( background-color )| foreground }}   }   To convert a foreground to a background.  Example : body   {   {{ .foreground | css ( color )| background }}   }    brightness   Shifts brightness either dark or lighter. Brightness is relative to 1 where 1 means no change.  Accepted values are floats that are greater than 0.  Ranges are clamped between 0 and 2.  Example - Darken : body   {   {{ .background | css ( background-color )| brightness ( 0.9 ) }}   }   Example - Lighten : body   {   {{ .background | css ( background-color )| brightness ( 1.1 ) }}   }    saturation   Shifts the saturation either to right (saturate) or the left (desaturate).  Saturation is relative to 1 where 1 means no change.  Accepted values are floats that are greater than 0.  Ranges are clamped between 0 and 2.  Example - Desaturate : body   {   {{ .background | css ( background-color )| saturation ( 0.9 ) }}   }   Example - Saturate : body   {   {{ .background | css ( background-color )| saturation ( 1.1 ) }}   }    grayscale   Filters all colors to a grayish tone.  Example : body   {   {{ .background | css ( background-color )| grayscale }}   }    sepia   Filters all colors to a sepia tone.  Example : body   {   {{ .background | css ( background-color )| sepia }}   }    invert   Inverts a color.  Example : body   {   {{ .background | css ( background-color )| invert }}   }    colorize   Filters all colors to a shade of the specified hue.  Think grayscale, but instead of gray, you define a non-gray hue.  The values are angular dimensions starting at the red primary at 0\u00b0, passing through the green primary at 120\u00b0 and the blue primary at 240\u00b0, and then wrapping back to red at 360\u00b0.  Example : body   {   {{ .background | css ( background-color )| colorize ( 30 ) }}   }    hue   Shifts the current hue either to the left or right.  The values are angular dimensions starting at the red primary at 0\u00b0, passing through the green primary at 120\u00b0 and the blue primary at 240\u00b0, and then wrapping back to red at 360\u00b0.  Values can either be negative to shift left or positive to shift the hue to the right.  Example - Left Shift : body   {   {{ .background | css ( background-color )| hue (- 30 ) }}   }   Example - Left Right : body   {   {{ .background | css ( background-color )| hue ( 30 ) }}   }    fade   Fades a color. Essentially it is like apply transparency to the color allowing the color schemes base background color to show through.  Example - Fade 50% : body   {   {{ .foreground | css ( color )| fade ( 0.5 ) }}   }", 
            "title": "Color Filters"
        }, 
        {
            "location": "/styling/#include-css-filter", 
            "text": "The template environment allows for retrieving CSS resources from Sublime Packages or built-in Pygments CSS from the Pygments library.   getcss   Retrieve a CSS file from Sublime's  Packages  folder.  CSS retrieved in this manner can include template variables and filters.  Example : {{ Packages/User/aprosopo-dark.css | getcss }}    pygments   Retrieve a built-in Pygments color scheme.  Example : {{ native | pygments }}", 
            "title": "Include CSS Filter"
        }, 
        {
            "location": "/styling/#template-variables", 
            "text": "The template environment provides a couple of variables that can be used to conditionally alter the CSS output.  Variables are found under  var .   var.sublime_version   sublime_version  contains the current Sublime Text version.  This allows you conditionally handle CSS features that are specific to a Sublime Text version.  Example  {%   if   var.sublime_version   =   3119   %}  padding :   0 . 2rem ;  {%   else   %}  padding :   0 . 2em ;  {%   endif   %}    var.mdpopups_version   mdpopups_version  contains the current MdPopups version which you can use in your CSS templates if needed.  Example  {%   if   var.mdpopups_version   =   ( 1 ,   9 ,   0 )   %}  /* do something */  {%   else   %}  /* do something else */  {%   endif   %}    var.default_style  Flag specifying whether default styling is being used.  See  mdpopups.default_style  for how to control this flag.  And see  default.css  for an example of how it is used.  var.is_dark  and  var.is_light   is_dark  checks if the color scheme is a dark color scheme.  Alternatively,  is_light  checks if the color scheme is a light color scheme.  Example : {%   if   var.is_light   %}  html {   {{ .background | css ( background-color )| brightness ( 0.9 ) }}   }  {%   else   %}  html {   {{ .background | css ( background-color )| brightness ( 1.1 ) }}   }  {%   endif   %}    var.is_popup  and  var.is_phantom   is_phantom  checks if the current CSS is for a phantom instead of a popup.  Alternatively,  is_popup  checks if the current use of the CSS is for a popup.  Example : {%   if   var.is_phantom   %}  html {   {{ .background | css ( background-color )| brightness ( 0.9 ) }}   }  {%   else   %}  html {   {{ .background | css ( background-color )| brightness ( 1.1 ) }}   }  {%   endif   %}    var.use_pygments   Checks if the Pygments syntax highlighter is being used.  Example : {%   if   var.use_pygments   %}  {%   if   var.is_light   %}  {{ default | pygments }}  {%   else   %}  {{ native | pygments }}  {%   endif   %}  {%   endif   %}    var.color_scheme   Retrieves the current color schemes name.  Example : {%   if   ( \n     var.color_scheme   in   ( \n         Packages/Theme - Aprosopo/Tomorrow-Night-Eighties-Stormy.tmTheme , \n         Packages/Theme - Aprosopo/Tomorrow-Morning.tmTheme , \n     )  )   %}  a   {   {{ .keyword.operator | css ( color ) }}   }  {%   else   %}  a   {   {{ .support.function | css ( color ) }}   }  {%   endif   %}", 
            "title": "Template Variables"
        }, 
        {
            "location": "/faq/", 
            "text": "F.A.Q\n\ue157\n\n\nQuestions\n\ue157\n\n\n\n\n\n\nWhy don't \npre\n tags work right when I do them, but MdPopups' work correctly?\n\n\nThis is because the HTML engine in Sublime treats \npre\n tags just as a normal block elements; it doesn't treat the content as preformatted.  When MdPopups creates code blocks, it actually does a lot of special formatting to the blocks.  It converts tabs to 4 spaces, and spaces are converted to \nnbsp;\n to prevent wrapping.  Lastly, new lines get converted to \nbr\n tags.\n\n\n\n\n\n\nWhy in code blocks do tabs get converted to 4 spaces?\n\n\nBecause I like it that way.  If you are planning on having a snippet of text sent through the syntax highlighter and do not want your tabs to be converted to 4 spaces, you should convert it to the number of spaces you like \nbefore\n sending it through the syntax highlighter.\n\n\n\n\n\n\nWhy does \ninsert element\n not work, or cause the popup/phantom not to show?\n\n\nBecause Sublime's HTML engine is extremely limited or the element you are trying to use hasn't been styled correctly yet. Though I do not have a complete list of all supported elements, you can check out the provided \ndefault.css\n on the repository to see what is supported. There are probably some elements you could style and then would work correctly, but there are others like \ntable\n will not \ncurrently\n work. In general, you should keep things basic, but feel free to experiment to get an understanding of Sublime's \nminihtml\n engine limitations.", 
            "title": "F.A.Q"
        }, 
        {
            "location": "/faq/#faq", 
            "text": "", 
            "title": "F.A.Q"
        }, 
        {
            "location": "/faq/#questions", 
            "text": "Why don't  pre  tags work right when I do them, but MdPopups' work correctly?  This is because the HTML engine in Sublime treats  pre  tags just as a normal block elements; it doesn't treat the content as preformatted.  When MdPopups creates code blocks, it actually does a lot of special formatting to the blocks.  It converts tabs to 4 spaces, and spaces are converted to  nbsp;  to prevent wrapping.  Lastly, new lines get converted to  br  tags.    Why in code blocks do tabs get converted to 4 spaces?  Because I like it that way.  If you are planning on having a snippet of text sent through the syntax highlighter and do not want your tabs to be converted to 4 spaces, you should convert it to the number of spaces you like  before  sending it through the syntax highlighter.    Why does  insert element  not work, or cause the popup/phantom not to show?  Because Sublime's HTML engine is extremely limited or the element you are trying to use hasn't been styled correctly yet. Though I do not have a complete list of all supported elements, you can check out the provided  default.css  on the repository to see what is supported. There are probably some elements you could style and then would work correctly, but there are others like  table  will not  currently  work. In general, you should keep things basic, but feel free to experiment to get an understanding of Sublime's  minihtml  engine limitations.", 
            "title": "Questions"
        }, 
        {
            "location": "/contributing/", 
            "text": "Contributing \n Support\n\ue157\n\n\nOverview\n\ue157\n\n\n\n\n\n\n\n\nSublime Versions\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nST3\n\n\nFully supported and actively maintained.\n\n\n\n\n\n\n\n\nContribution from the community is encouraged and can be done in a variety of ways:\n\n\n\n\nBug reports.\n\n\nReviewing code.\n\n\nCode patches via pull requests.\n\n\nDocumentation improvements via pull requests.\n\n\n\n\nBug Reports\n\ue157\n\n\n\n\n\n\nPlease \nread the documentation\n and \nsearch the issue tracker\n to try to find the answer to your question \nbefore\n posting an issue.\n\n\n\n\n\n\nWhen creating an issue on the repository, please provide as much info as possible:\n\n\n\n\nSublime Text build.\n\n\nOperating system.\n\n\nErrors in console.\n\n\nColor scheme currently being used.\n\n\nLanguage syntax highlighter being used if issue deals with a code highlighting.\n\n\nDetailed description of the problem.\n\n\nExamples for reproducing the error.  You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste.\n\n\n\n\nThe more info provided the greater the chance someone will take the time to answer, implement, or fix the issue.\n\n\n\n\n\n\nBe prepared to answer questions and provide additional information if required.  Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.\n\n\n\n\n\n\nReviewing Code\n\ue157\n\n\nTake part in reviewing pull requests and/or reviewing commits and merges.  Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.\n\n\nPull Requests\n\ue157\n\n\nPull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of.\n\n\n\n\n\n\nPlease describe the change in as much detail as possible so I can understand what is being added or modified.\n\n\n\n\n\n\nIf you are solving a bug that does not already have an issue, please describe the bug in detail and provide info on how to reproduce if applicable (this is good for me and others to reference later when verifying the issue has been resolved).\n\n\n\n\n\n\nPlease reference and link related open bugs or feature requests in this pull if applicable.\n\n\n\n\n\n\nMake sure you've documented or updated the existing documentation if introducing a new feature or modifying the behavior of an existing feature that a user needs to be aware of.  I will not accept new features or changes to existing features if you have not provided documentation describing the feature.\n\n\n\n\n\n\nContinuous integration tests on are run on all pull requests and commits via Travis CI.  When making a pull request, the tests will automatically be run, and the request must pass to be accepted.  You can (and should) run these tests before pull requesting.  If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.\n\n\nRunning Validation Tests\n\ue157\n\n\nLinting is performed on the entire project with \nflake8\n, \nflake8-docstrings\n, \nflake8-putty\n, and \npep8-naming\n.  These can be installed via:\n\n\npip install \nflake8\n3\n\npip install flake8-docstrings\npip install flake8-putty\npip install pep8-naming\n\n\n\n\nLinting is performed with the following command:\n\n\nflake8 .\n\n\n\n\nDocumentation Improvements\n\ue157\n\n\nA ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation.  If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation.  Help with documentation is always appreciated and can be done via pull requests.  There shouldn't be any need to run validation tests if only updating documentation.\n\n\nYou don't have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of \nMkDocs\n, the \nMaterial theme\n, and \nPyMdown Extensions\n to render the docs.  You can preview the docs if you install these two packages.  The command for previewing the docs is \nmkdocs serve\n from the root directory. You can then view the documents at \nlocalhost:8000\n.", 
            "title": "Contributing &amp; Support"
        }, 
        {
            "location": "/contributing/#contributing--support", 
            "text": "", 
            "title": "Contributing &amp; Support"
        }, 
        {
            "location": "/contributing/#overview", 
            "text": "Sublime Versions  Description      ST3  Fully supported and actively maintained.     Contribution from the community is encouraged and can be done in a variety of ways:   Bug reports.  Reviewing code.  Code patches via pull requests.  Documentation improvements via pull requests.", 
            "title": "Overview"
        }, 
        {
            "location": "/contributing/#bug-reports", 
            "text": "Please  read the documentation  and  search the issue tracker  to try to find the answer to your question  before  posting an issue.    When creating an issue on the repository, please provide as much info as possible:   Sublime Text build.  Operating system.  Errors in console.  Color scheme currently being used.  Language syntax highlighter being used if issue deals with a code highlighting.  Detailed description of the problem.  Examples for reproducing the error.  You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste.   The more info provided the greater the chance someone will take the time to answer, implement, or fix the issue.    Be prepared to answer questions and provide additional information if required.  Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.", 
            "title": "Bug Reports"
        }, 
        {
            "location": "/contributing/#reviewing-code", 
            "text": "Take part in reviewing pull requests and/or reviewing commits and merges.  Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.", 
            "title": "Reviewing Code"
        }, 
        {
            "location": "/contributing/#pull-requests", 
            "text": "Pull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of.    Please describe the change in as much detail as possible so I can understand what is being added or modified.    If you are solving a bug that does not already have an issue, please describe the bug in detail and provide info on how to reproduce if applicable (this is good for me and others to reference later when verifying the issue has been resolved).    Please reference and link related open bugs or feature requests in this pull if applicable.    Make sure you've documented or updated the existing documentation if introducing a new feature or modifying the behavior of an existing feature that a user needs to be aware of.  I will not accept new features or changes to existing features if you have not provided documentation describing the feature.    Continuous integration tests on are run on all pull requests and commits via Travis CI.  When making a pull request, the tests will automatically be run, and the request must pass to be accepted.  You can (and should) run these tests before pull requesting.  If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.", 
            "title": "Pull Requests"
        }, 
        {
            "location": "/contributing/#running-validation-tests", 
            "text": "Linting is performed on the entire project with  flake8 ,  flake8-docstrings ,  flake8-putty , and  pep8-naming .  These can be installed via:  pip install  flake8 3 \npip install flake8-docstrings\npip install flake8-putty\npip install pep8-naming  Linting is performed with the following command:  flake8 .", 
            "title": "Running Validation Tests"
        }, 
        {
            "location": "/contributing/#documentation-improvements", 
            "text": "A ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation.  If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation.  Help with documentation is always appreciated and can be done via pull requests.  There shouldn't be any need to run validation tests if only updating documentation.  You don't have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of  MkDocs , the  Material theme , and  PyMdown Extensions  to render the docs.  You can preview the docs if you install these two packages.  The command for previewing the docs is  mkdocs serve  from the root directory. You can then view the documents at  localhost:8000 .", 
            "title": "Documentation Improvements"
        }, 
        {
            "location": "/changelog/", 
            "text": "Changelog\n\ue157\n\n\n2.1.1\n\ue157\n\n\n\n\nJune 21, 2017\n\n\n\n\n\n\nFIX\n: Strip frontmatter when \nmd=False\n. Throw it away as we only use the frontmatter for Markdown.\n\n\n\n\n2.1.0\n\ue157\n\n\n\n\nJune 20, 2017\n\n\n\n\n\n\nNEW\n: Allow adding and configuring extensions via YAML frontmatter. This feature deprecates \nnl2br\n function parameter which will be removed some time in the future.\n\n\nNEW\n: Allow setting whether block, code tags will allow word wrapping via YAML frontmatter. This feature deprecates the \nallow_word_wrap\n function parameter which will be removed some time in the future.\n\n\nNEW\n: Expose SuperFences' \ncustom_fences\n feature via YAML frontmatter.\n\n\nNEW\n: Upgrade internal extensions.\n\n\nNEW\n: Import official \npymdownx\n extension if \npymdownx\n is installed as a dependency so we can drop internal vendored extension copies in the future. This is allowed to be optional for a time until people can update their dependencies.\n\n\nNEW\n: Import \npyyaml\n extension if \npyyaml\n is installed for frontmatter. This is allowed to be optional for a time until people can update their dependencies.\n\n\nNEW\n: \ninline-highlight\n class in no longer applied to inline code.  Instead \nhighlight\n is applied to both inline and block code.\n\n\n\n\n2.0\n\ue157\n\n\n\n\nJune 1, 2017\n\n\n\n\n\n\nNEW\n: Add \nkbd\n styling and \nadmontion\n styling.\n\n\nNEW\n: New rewritten \ndefault.css\n. Adds styling that uses new Sublime CSS features and drops legacy styling for old ST versions. No more \nbase.css\n.\n\n\nNEW\n: No longer outputs scope CSS into default CSS. Users must use template to acquire CSS for specific scopes. This helps keep the CSS namespace clean. In general, CSS should start using Sublime CSS variables like \n--bluish\n, \n--redish\n etc.  If a user needs CSS for a scope, they can use the \ncss\n template filter to add the scope's CSS to a class of their choice.\n\n\nNEW\n: MdPopups now requires ST 3124+ and all legacy styling and workarounds for ST \n 3124 have been dropped.\n\n\nNEW\n: Code blocks are now forced to use a monospace fonts.\n\n\nNEW\n: Legacy \nrelativesize\n template filter has been dropped. Users should use native CSS \nrem\n units for relative sizes.\n\n\nNEW\n: Upgraded \npymdownx\n extensions which includes fixes and enhancements. Also abandoned using \nCodeHilite\n in favor of \npymdownx.highlight\n.\n\n\nNEW\n: Add option to support wrapping in code blocks.\n\n\nNEW\n: CSS filters are no longer limited to a set list of TextMate or Sublime scopes, and you no longer specify the parameters as CSS classes (but MdPopups will be forgiving if you do), but you should specify them as scopes (complexity doesn't matter). Also no more specifying multiple scopes separated by commas. Read documentation for more info.\n\n\nNEW\n: CSS filter now accepts an \nexplicit_background\n option to return a background only when explicitly defined (which is the default). When disabled, the filter will always return a valid background color (which is usually the base background).\n\n\nNEW\n: Pygments is no longer the default syntax highlighter.\n\n\nFIX\n: Fix foreground output that was missing semicolon according to spec.\n\n\nFIX\n: Numerous CSS fixes.\n\n\n\n\n1.0\n\ue157\n\n\n\n\nNov 12, 2015\n\n\n\n\n\n\nNEW\n: First release.", 
            "title": "Changelog"
        }, 
        {
            "location": "/changelog/#changelog", 
            "text": "", 
            "title": "Changelog"
        }, 
        {
            "location": "/changelog/#211", 
            "text": "June 21, 2017    FIX : Strip frontmatter when  md=False . Throw it away as we only use the frontmatter for Markdown.", 
            "title": "2.1.1"
        }, 
        {
            "location": "/changelog/#210", 
            "text": "June 20, 2017    NEW : Allow adding and configuring extensions via YAML frontmatter. This feature deprecates  nl2br  function parameter which will be removed some time in the future.  NEW : Allow setting whether block, code tags will allow word wrapping via YAML frontmatter. This feature deprecates the  allow_word_wrap  function parameter which will be removed some time in the future.  NEW : Expose SuperFences'  custom_fences  feature via YAML frontmatter.  NEW : Upgrade internal extensions.  NEW : Import official  pymdownx  extension if  pymdownx  is installed as a dependency so we can drop internal vendored extension copies in the future. This is allowed to be optional for a time until people can update their dependencies.  NEW : Import  pyyaml  extension if  pyyaml  is installed for frontmatter. This is allowed to be optional for a time until people can update their dependencies.  NEW :  inline-highlight  class in no longer applied to inline code.  Instead  highlight  is applied to both inline and block code.", 
            "title": "2.1.0"
        }, 
        {
            "location": "/changelog/#20", 
            "text": "June 1, 2017    NEW : Add  kbd  styling and  admontion  styling.  NEW : New rewritten  default.css . Adds styling that uses new Sublime CSS features and drops legacy styling for old ST versions. No more  base.css .  NEW : No longer outputs scope CSS into default CSS. Users must use template to acquire CSS for specific scopes. This helps keep the CSS namespace clean. In general, CSS should start using Sublime CSS variables like  --bluish ,  --redish  etc.  If a user needs CSS for a scope, they can use the  css  template filter to add the scope's CSS to a class of their choice.  NEW : MdPopups now requires ST 3124+ and all legacy styling and workarounds for ST   3124 have been dropped.  NEW : Code blocks are now forced to use a monospace fonts.  NEW : Legacy  relativesize  template filter has been dropped. Users should use native CSS  rem  units for relative sizes.  NEW : Upgraded  pymdownx  extensions which includes fixes and enhancements. Also abandoned using  CodeHilite  in favor of  pymdownx.highlight .  NEW : Add option to support wrapping in code blocks.  NEW : CSS filters are no longer limited to a set list of TextMate or Sublime scopes, and you no longer specify the parameters as CSS classes (but MdPopups will be forgiving if you do), but you should specify them as scopes (complexity doesn't matter). Also no more specifying multiple scopes separated by commas. Read documentation for more info.  NEW : CSS filter now accepts an  explicit_background  option to return a background only when explicitly defined (which is the default). When disabled, the filter will always return a valid background color (which is usually the base background).  NEW : Pygments is no longer the default syntax highlighter.  FIX : Fix foreground output that was missing semicolon according to spec.  FIX : Numerous CSS fixes.", 
            "title": "2.0"
        }, 
        {
            "location": "/changelog/#10", 
            "text": "Nov 12, 2015    NEW : First release.", 
            "title": "1.0"
        }, 
        {
            "location": "/license/", 
            "text": "License\n\ue157\n\n\nSublime Markdown Popups is released under the MIT license.\n\n\nCopyright \n 2015 - 2017 Isaac Muse \n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", 
            "title": "License"
        }, 
        {
            "location": "/license/#license", 
            "text": "Sublime Markdown Popups is released under the MIT license.  Copyright   2015 - 2017 Isaac Muse   Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", 
            "title": "License"
        }
    ]
}